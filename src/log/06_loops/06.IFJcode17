# 2017-12-04 23:21:45.016241
# SECTION: 06_loops
# TEST: 06
# INFO: while with elseif in condition
# REQUIRED EXTENSIONS: IFTHEN
# ACTIVATED EXTENSIONS: FUNEXP, BASE, IFTHEN
# STATE: SUCCESS
# 
# COMPILER STDERR:
# 
# INTERPRETER STDERR:
# Executing instruction: IDEFVAR at line: 2 with following arguments:
# Dest: GF@$str1
# Executing instruction: IDEFVAR at line: 3 with following arguments:
# Dest: GF@$str2
# Executing instruction: IDEFVAR at line: 4 with following arguments:
# Dest: GF@$num1
# Executing instruction: IDEFVAR at line: 5 with following arguments:
# Dest: GF@$num2
# Executing instruction: IDEFVAR at line: 6 with following arguments:
# Dest: GF@$num3
# Executing instruction: IDEFVAR at line: 7 with following arguments:
# Dest: GF@$bool1
# Executing instruction: IDEFVAR at line: 8 with following arguments:
# Dest: GF@$counter
# Executing instruction: IDEFVAR at line: 9 with following arguments:
# Dest: GF@$char
# Executing instruction: IJUMP at line: 10 with following arguments:
# Executing instruction: ILABEL at line: 12 with following arguments:
# Executing instruction: ICREATEFRAME at line: 13 with following arguments:
# Executing instruction: IPUSHFRAME at line: 14 with following arguments:
# Executing instruction: IDEFVAR at line: 16 with following arguments:
# Dest: LF@a
# Executing instruction: IMOVE at line: 17 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@a()
# Executing instruction: IPUSHS at line: 19 with following arguments:
# Arg1: Const@=78(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 20 with following arguments:
# Arg1: Stack@=78(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 21 with following arguments:
# Arg1: Const@=2(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 22 with following arguments:
# Arg1: Stack@=2(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 23 with following arguments:
# Arg1: Stack@=78(double)
# Arg2: Stack@=2(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 24 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 25 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 28 with following arguments:
# Arg1: Const@=12(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 29 with following arguments:
# Arg1: Stack@=12(int)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 30 with following arguments:
# Arg1: Stack@=12(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 31 with following arguments:
# Arg1: Stack@=12(int)
# Dest: LF@a=0(int)
# Executing instruction: ILABEL at line: 33 with following arguments:
# Executing instruction: IPUSHS at line: 34 with following arguments:
# Arg1: LF@a=12(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 35 with following arguments:
# Arg1: Stack@=12(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 36 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 37 with following arguments:
# Arg1: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: ILSS at line: 38 with following arguments:
# Arg1: Stack@=12(double)
# Arg2: Stack@=1(double)
# Dest: Stack@()
# Executing instruction: INOTS at line: 39 with following arguments:
# Arg1: Stack@=false(bool)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 40 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 41 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 43 with following arguments:
# Arg1: LF@a=12(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 44 with following arguments:
# Arg1: Stack@=12(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 45 with following arguments:
# Arg1: Const@=8(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 46 with following arguments:
# Arg1: Stack@=8(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 47 with following arguments:
# Arg1: Stack@=12(double)
# Arg2: Stack@=8(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 48 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 49 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 52 with following arguments:
# Arg1: Const@=69(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 53 with following arguments:
# Arg1: Stack@=69(int)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 54 with following arguments:
# Arg1: Stack@=69(double)
# Dest: Stack@()
# Executing instruction: ICREATEFRAME at line: 55 with following arguments:
# Executing instruction: IDEFVAR at line: 56 with following arguments:
# Dest: TF@write
# Executing instruction: IPOPS at line: 57 with following arguments:
# Arg1: Stack@=69(int)
# Dest: TF@write()
# Executing instruction: IWRITE at line: 58 with following arguments:
# Arg1: TF@write=69(int)
# Executing instruction: IJUMP at line: 60 with following arguments:
# Executing instruction: ILABEL at line: 90 with following arguments:
# Executing instruction: IPUSHS at line: 92 with following arguments:
# Arg1: LF@a=12(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 93 with following arguments:
# Arg1: Stack@=12(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 94 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 95 with following arguments:
# Arg1: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 96 with following arguments:
# Arg1: Stack@=12(double)
# Arg2: Stack@=1(double)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 97 with following arguments:
# Arg1: Stack@=11(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 98 with following arguments:
# Arg1: Stack@=11(int)
# Dest: LF@a=12(int)
# Executing instruction: IJUMP at line: 100 with following arguments:
# Executing instruction: ILABEL at line: 33 with following arguments:
# Executing instruction: IPUSHS at line: 34 with following arguments:
# Arg1: LF@a=11(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 35 with following arguments:
# Arg1: Stack@=11(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 36 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 37 with following arguments:
# Arg1: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: ILSS at line: 38 with following arguments:
# Arg1: Stack@=11(double)
# Arg2: Stack@=1(double)
# Dest: Stack@()
# Executing instruction: INOTS at line: 39 with following arguments:
# Arg1: Stack@=false(bool)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 40 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 41 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 43 with following arguments:
# Arg1: LF@a=11(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 44 with following arguments:
# Arg1: Stack@=11(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 45 with following arguments:
# Arg1: Const@=8(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 46 with following arguments:
# Arg1: Stack@=8(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 47 with following arguments:
# Arg1: Stack@=11(double)
# Arg2: Stack@=8(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 48 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 49 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 52 with following arguments:
# Arg1: Const@=69(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 53 with following arguments:
# Arg1: Stack@=69(int)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 54 with following arguments:
# Arg1: Stack@=69(double)
# Dest: Stack@()
# Executing instruction: ICREATEFRAME at line: 55 with following arguments:
# Executing instruction: IDEFVAR at line: 56 with following arguments:
# Dest: TF@write
# Executing instruction: IPOPS at line: 57 with following arguments:
# Arg1: Stack@=69(int)
# Dest: TF@write()
# Executing instruction: IWRITE at line: 58 with following arguments:
# Arg1: TF@write=69(int)
# Executing instruction: IJUMP at line: 60 with following arguments:
# Executing instruction: ILABEL at line: 90 with following arguments:
# Executing instruction: IPUSHS at line: 92 with following arguments:
# Arg1: LF@a=11(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 93 with following arguments:
# Arg1: Stack@=11(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 94 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 95 with following arguments:
# Arg1: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 96 with following arguments:
# Arg1: Stack@=11(double)
# Arg2: Stack@=1(double)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 97 with following arguments:
# Arg1: Stack@=10(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 98 with following arguments:
# Arg1: Stack@=10(int)
# Dest: LF@a=11(int)
# Executing instruction: IJUMP at line: 100 with following arguments:
# Executing instruction: ILABEL at line: 33 with following arguments:
# Executing instruction: IPUSHS at line: 34 with following arguments:
# Arg1: LF@a=10(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 35 with following arguments:
# Arg1: Stack@=10(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 36 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 37 with following arguments:
# Arg1: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: ILSS at line: 38 with following arguments:
# Arg1: Stack@=10(double)
# Arg2: Stack@=1(double)
# Dest: Stack@()
# Executing instruction: INOTS at line: 39 with following arguments:
# Arg1: Stack@=false(bool)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 40 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 41 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 43 with following arguments:
# Arg1: LF@a=10(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 44 with following arguments:
# Arg1: Stack@=10(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 45 with following arguments:
# Arg1: Const@=8(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 46 with following arguments:
# Arg1: Stack@=8(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 47 with following arguments:
# Arg1: Stack@=10(double)
# Arg2: Stack@=8(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 48 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 49 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 52 with following arguments:
# Arg1: Const@=69(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 53 with following arguments:
# Arg1: Stack@=69(int)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 54 with following arguments:
# Arg1: Stack@=69(double)
# Dest: Stack@()
# Executing instruction: ICREATEFRAME at line: 55 with following arguments:
# Executing instruction: IDEFVAR at line: 56 with following arguments:
# Dest: TF@write
# Executing instruction: IPOPS at line: 57 with following arguments:
# Arg1: Stack@=69(int)
# Dest: TF@write()
# Executing instruction: IWRITE at line: 58 with following arguments:
# Arg1: TF@write=69(int)
# Executing instruction: IJUMP at line: 60 with following arguments:
# Executing instruction: ILABEL at line: 90 with following arguments:
# Executing instruction: IPUSHS at line: 92 with following arguments:
# Arg1: LF@a=10(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 93 with following arguments:
# Arg1: Stack@=10(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 94 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 95 with following arguments:
# Arg1: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 96 with following arguments:
# Arg1: Stack@=10(double)
# Arg2: Stack@=1(double)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 97 with following arguments:
# Arg1: Stack@=9(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 98 with following arguments:
# Arg1: Stack@=9(int)
# Dest: LF@a=10(int)
# Executing instruction: IJUMP at line: 100 with following arguments:
# Executing instruction: ILABEL at line: 33 with following arguments:
# Executing instruction: IPUSHS at line: 34 with following arguments:
# Arg1: LF@a=9(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 35 with following arguments:
# Arg1: Stack@=9(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 36 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 37 with following arguments:
# Arg1: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: ILSS at line: 38 with following arguments:
# Arg1: Stack@=9(double)
# Arg2: Stack@=1(double)
# Dest: Stack@()
# Executing instruction: INOTS at line: 39 with following arguments:
# Arg1: Stack@=false(bool)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 40 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 41 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 43 with following arguments:
# Arg1: LF@a=9(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 44 with following arguments:
# Arg1: Stack@=9(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 45 with following arguments:
# Arg1: Const@=8(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 46 with following arguments:
# Arg1: Stack@=8(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 47 with following arguments:
# Arg1: Stack@=9(double)
# Arg2: Stack@=8(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 48 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 49 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 52 with following arguments:
# Arg1: Const@=69(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 53 with following arguments:
# Arg1: Stack@=69(int)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 54 with following arguments:
# Arg1: Stack@=69(double)
# Dest: Stack@()
# Executing instruction: ICREATEFRAME at line: 55 with following arguments:
# Executing instruction: IDEFVAR at line: 56 with following arguments:
# Dest: TF@write
# Executing instruction: IPOPS at line: 57 with following arguments:
# Arg1: Stack@=69(int)
# Dest: TF@write()
# Executing instruction: IWRITE at line: 58 with following arguments:
# Arg1: TF@write=69(int)
# Executing instruction: IJUMP at line: 60 with following arguments:
# Executing instruction: ILABEL at line: 90 with following arguments:
# Executing instruction: IPUSHS at line: 92 with following arguments:
# Arg1: LF@a=9(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 93 with following arguments:
# Arg1: Stack@=9(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 94 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 95 with following arguments:
# Arg1: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 96 with following arguments:
# Arg1: Stack@=9(double)
# Arg2: Stack@=1(double)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 97 with following arguments:
# Arg1: Stack@=8(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 98 with following arguments:
# Arg1: Stack@=8(int)
# Dest: LF@a=9(int)
# Executing instruction: IJUMP at line: 100 with following arguments:
# Executing instruction: ILABEL at line: 33 with following arguments:
# Executing instruction: IPUSHS at line: 34 with following arguments:
# Arg1: LF@a=8(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 35 with following arguments:
# Arg1: Stack@=8(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 36 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 37 with following arguments:
# Arg1: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: ILSS at line: 38 with following arguments:
# Arg1: Stack@=8(double)
# Arg2: Stack@=1(double)
# Dest: Stack@()
# Executing instruction: INOTS at line: 39 with following arguments:
# Arg1: Stack@=false(bool)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 40 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 41 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 43 with following arguments:
# Arg1: LF@a=8(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 44 with following arguments:
# Arg1: Stack@=8(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 45 with following arguments:
# Arg1: Const@=8(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 46 with following arguments:
# Arg1: Stack@=8(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 47 with following arguments:
# Arg1: Stack@=8(double)
# Arg2: Stack@=8(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 48 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 49 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ILABEL at line: 61 with following arguments:
# Executing instruction: IPUSHS at line: 62 with following arguments:
# Arg1: LF@a=8(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 63 with following arguments:
# Arg1: Stack@=8(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 64 with following arguments:
# Arg1: Const@=3(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 65 with following arguments:
# Arg1: Stack@=3(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 66 with following arguments:
# Arg1: Stack@=8(double)
# Arg2: Stack@=3(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 67 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 68 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 71 with following arguments:
# Arg1: Const@=74(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 72 with following arguments:
# Arg1: Stack@=74(int)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 73 with following arguments:
# Arg1: Stack@=74(double)
# Dest: Stack@()
# Executing instruction: ICREATEFRAME at line: 74 with following arguments:
# Executing instruction: IDEFVAR at line: 75 with following arguments:
# Dest: TF@write
# Executing instruction: IPOPS at line: 76 with following arguments:
# Arg1: Stack@=74(int)
# Dest: TF@write()
# Executing instruction: IWRITE at line: 77 with following arguments:
# Arg1: TF@write=74(int)
# Executing instruction: IJUMP at line: 79 with following arguments:
# Executing instruction: ILABEL at line: 90 with following arguments:
# Executing instruction: IPUSHS at line: 92 with following arguments:
# Arg1: LF@a=8(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 93 with following arguments:
# Arg1: Stack@=8(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 94 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 95 with following arguments:
# Arg1: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 96 with following arguments:
# Arg1: Stack@=8(double)
# Arg2: Stack@=1(double)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 97 with following arguments:
# Arg1: Stack@=7(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 98 with following arguments:
# Arg1: Stack@=7(int)
# Dest: LF@a=8(int)
# Executing instruction: IJUMP at line: 100 with following arguments:
# Executing instruction: ILABEL at line: 33 with following arguments:
# Executing instruction: IPUSHS at line: 34 with following arguments:
# Arg1: LF@a=7(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 35 with following arguments:
# Arg1: Stack@=7(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 36 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 37 with following arguments:
# Arg1: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: ILSS at line: 38 with following arguments:
# Arg1: Stack@=7(double)
# Arg2: Stack@=1(double)
# Dest: Stack@()
# Executing instruction: INOTS at line: 39 with following arguments:
# Arg1: Stack@=false(bool)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 40 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 41 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 43 with following arguments:
# Arg1: LF@a=7(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 44 with following arguments:
# Arg1: Stack@=7(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 45 with following arguments:
# Arg1: Const@=8(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 46 with following arguments:
# Arg1: Stack@=8(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 47 with following arguments:
# Arg1: Stack@=7(double)
# Arg2: Stack@=8(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 48 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 49 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ILABEL at line: 61 with following arguments:
# Executing instruction: IPUSHS at line: 62 with following arguments:
# Arg1: LF@a=7(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 63 with following arguments:
# Arg1: Stack@=7(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 64 with following arguments:
# Arg1: Const@=3(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 65 with following arguments:
# Arg1: Stack@=3(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 66 with following arguments:
# Arg1: Stack@=7(double)
# Arg2: Stack@=3(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 67 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 68 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 71 with following arguments:
# Arg1: Const@=74(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 72 with following arguments:
# Arg1: Stack@=74(int)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 73 with following arguments:
# Arg1: Stack@=74(double)
# Dest: Stack@()
# Executing instruction: ICREATEFRAME at line: 74 with following arguments:
# Executing instruction: IDEFVAR at line: 75 with following arguments:
# Dest: TF@write
# Executing instruction: IPOPS at line: 76 with following arguments:
# Arg1: Stack@=74(int)
# Dest: TF@write()
# Executing instruction: IWRITE at line: 77 with following arguments:
# Arg1: TF@write=74(int)
# Executing instruction: IJUMP at line: 79 with following arguments:
# Executing instruction: ILABEL at line: 90 with following arguments:
# Executing instruction: IPUSHS at line: 92 with following arguments:
# Arg1: LF@a=7(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 93 with following arguments:
# Arg1: Stack@=7(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 94 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 95 with following arguments:
# Arg1: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 96 with following arguments:
# Arg1: Stack@=7(double)
# Arg2: Stack@=1(double)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 97 with following arguments:
# Arg1: Stack@=6(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 98 with following arguments:
# Arg1: Stack@=6(int)
# Dest: LF@a=7(int)
# Executing instruction: IJUMP at line: 100 with following arguments:
# Executing instruction: ILABEL at line: 33 with following arguments:
# Executing instruction: IPUSHS at line: 34 with following arguments:
# Arg1: LF@a=6(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 35 with following arguments:
# Arg1: Stack@=6(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 36 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 37 with following arguments:
# Arg1: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: ILSS at line: 38 with following arguments:
# Arg1: Stack@=6(double)
# Arg2: Stack@=1(double)
# Dest: Stack@()
# Executing instruction: INOTS at line: 39 with following arguments:
# Arg1: Stack@=false(bool)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 40 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 41 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 43 with following arguments:
# Arg1: LF@a=6(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 44 with following arguments:
# Arg1: Stack@=6(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 45 with following arguments:
# Arg1: Const@=8(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 46 with following arguments:
# Arg1: Stack@=8(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 47 with following arguments:
# Arg1: Stack@=6(double)
# Arg2: Stack@=8(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 48 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 49 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ILABEL at line: 61 with following arguments:
# Executing instruction: IPUSHS at line: 62 with following arguments:
# Arg1: LF@a=6(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 63 with following arguments:
# Arg1: Stack@=6(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 64 with following arguments:
# Arg1: Const@=3(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 65 with following arguments:
# Arg1: Stack@=3(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 66 with following arguments:
# Arg1: Stack@=6(double)
# Arg2: Stack@=3(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 67 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 68 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 71 with following arguments:
# Arg1: Const@=74(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 72 with following arguments:
# Arg1: Stack@=74(int)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 73 with following arguments:
# Arg1: Stack@=74(double)
# Dest: Stack@()
# Executing instruction: ICREATEFRAME at line: 74 with following arguments:
# Executing instruction: IDEFVAR at line: 75 with following arguments:
# Dest: TF@write
# Executing instruction: IPOPS at line: 76 with following arguments:
# Arg1: Stack@=74(int)
# Dest: TF@write()
# Executing instruction: IWRITE at line: 77 with following arguments:
# Arg1: TF@write=74(int)
# Executing instruction: IJUMP at line: 79 with following arguments:
# Executing instruction: ILABEL at line: 90 with following arguments:
# Executing instruction: IPUSHS at line: 92 with following arguments:
# Arg1: LF@a=6(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 93 with following arguments:
# Arg1: Stack@=6(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 94 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 95 with following arguments:
# Arg1: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 96 with following arguments:
# Arg1: Stack@=6(double)
# Arg2: Stack@=1(double)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 97 with following arguments:
# Arg1: Stack@=5(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 98 with following arguments:
# Arg1: Stack@=5(int)
# Dest: LF@a=6(int)
# Executing instruction: IJUMP at line: 100 with following arguments:
# Executing instruction: ILABEL at line: 33 with following arguments:
# Executing instruction: IPUSHS at line: 34 with following arguments:
# Arg1: LF@a=5(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 35 with following arguments:
# Arg1: Stack@=5(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 36 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 37 with following arguments:
# Arg1: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: ILSS at line: 38 with following arguments:
# Arg1: Stack@=5(double)
# Arg2: Stack@=1(double)
# Dest: Stack@()
# Executing instruction: INOTS at line: 39 with following arguments:
# Arg1: Stack@=false(bool)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 40 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 41 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 43 with following arguments:
# Arg1: LF@a=5(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 44 with following arguments:
# Arg1: Stack@=5(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 45 with following arguments:
# Arg1: Const@=8(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 46 with following arguments:
# Arg1: Stack@=8(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 47 with following arguments:
# Arg1: Stack@=5(double)
# Arg2: Stack@=8(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 48 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 49 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ILABEL at line: 61 with following arguments:
# Executing instruction: IPUSHS at line: 62 with following arguments:
# Arg1: LF@a=5(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 63 with following arguments:
# Arg1: Stack@=5(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 64 with following arguments:
# Arg1: Const@=3(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 65 with following arguments:
# Arg1: Stack@=3(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 66 with following arguments:
# Arg1: Stack@=5(double)
# Arg2: Stack@=3(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 67 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 68 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 71 with following arguments:
# Arg1: Const@=74(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 72 with following arguments:
# Arg1: Stack@=74(int)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 73 with following arguments:
# Arg1: Stack@=74(double)
# Dest: Stack@()
# Executing instruction: ICREATEFRAME at line: 74 with following arguments:
# Executing instruction: IDEFVAR at line: 75 with following arguments:
# Dest: TF@write
# Executing instruction: IPOPS at line: 76 with following arguments:
# Arg1: Stack@=74(int)
# Dest: TF@write()
# Executing instruction: IWRITE at line: 77 with following arguments:
# Arg1: TF@write=74(int)
# Executing instruction: IJUMP at line: 79 with following arguments:
# Executing instruction: ILABEL at line: 90 with following arguments:
# Executing instruction: IPUSHS at line: 92 with following arguments:
# Arg1: LF@a=5(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 93 with following arguments:
# Arg1: Stack@=5(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 94 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 95 with following arguments:
# Arg1: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 96 with following arguments:
# Arg1: Stack@=5(double)
# Arg2: Stack@=1(double)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 97 with following arguments:
# Arg1: Stack@=4(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 98 with following arguments:
# Arg1: Stack@=4(int)
# Dest: LF@a=5(int)
# Executing instruction: IJUMP at line: 100 with following arguments:
# Executing instruction: ILABEL at line: 33 with following arguments:
# Executing instruction: IPUSHS at line: 34 with following arguments:
# Arg1: LF@a=4(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 35 with following arguments:
# Arg1: Stack@=4(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 36 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 37 with following arguments:
# Arg1: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: ILSS at line: 38 with following arguments:
# Arg1: Stack@=4(double)
# Arg2: Stack@=1(double)
# Dest: Stack@()
# Executing instruction: INOTS at line: 39 with following arguments:
# Arg1: Stack@=false(bool)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 40 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 41 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 43 with following arguments:
# Arg1: LF@a=4(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 44 with following arguments:
# Arg1: Stack@=4(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 45 with following arguments:
# Arg1: Const@=8(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 46 with following arguments:
# Arg1: Stack@=8(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 47 with following arguments:
# Arg1: Stack@=4(double)
# Arg2: Stack@=8(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 48 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 49 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ILABEL at line: 61 with following arguments:
# Executing instruction: IPUSHS at line: 62 with following arguments:
# Arg1: LF@a=4(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 63 with following arguments:
# Arg1: Stack@=4(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 64 with following arguments:
# Arg1: Const@=3(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 65 with following arguments:
# Arg1: Stack@=3(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 66 with following arguments:
# Arg1: Stack@=4(double)
# Arg2: Stack@=3(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 67 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 68 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 71 with following arguments:
# Arg1: Const@=74(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 72 with following arguments:
# Arg1: Stack@=74(int)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 73 with following arguments:
# Arg1: Stack@=74(double)
# Dest: Stack@()
# Executing instruction: ICREATEFRAME at line: 74 with following arguments:
# Executing instruction: IDEFVAR at line: 75 with following arguments:
# Dest: TF@write
# Executing instruction: IPOPS at line: 76 with following arguments:
# Arg1: Stack@=74(int)
# Dest: TF@write()
# Executing instruction: IWRITE at line: 77 with following arguments:
# Arg1: TF@write=74(int)
# Executing instruction: IJUMP at line: 79 with following arguments:
# Executing instruction: ILABEL at line: 90 with following arguments:
# Executing instruction: IPUSHS at line: 92 with following arguments:
# Arg1: LF@a=4(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 93 with following arguments:
# Arg1: Stack@=4(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 94 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 95 with following arguments:
# Arg1: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 96 with following arguments:
# Arg1: Stack@=4(double)
# Arg2: Stack@=1(double)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 97 with following arguments:
# Arg1: Stack@=3(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 98 with following arguments:
# Arg1: Stack@=3(int)
# Dest: LF@a=4(int)
# Executing instruction: IJUMP at line: 100 with following arguments:
# Executing instruction: ILABEL at line: 33 with following arguments:
# Executing instruction: IPUSHS at line: 34 with following arguments:
# Arg1: LF@a=3(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 35 with following arguments:
# Arg1: Stack@=3(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 36 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 37 with following arguments:
# Arg1: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: ILSS at line: 38 with following arguments:
# Arg1: Stack@=3(double)
# Arg2: Stack@=1(double)
# Dest: Stack@()
# Executing instruction: INOTS at line: 39 with following arguments:
# Arg1: Stack@=false(bool)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 40 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 41 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 43 with following arguments:
# Arg1: LF@a=3(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 44 with following arguments:
# Arg1: Stack@=3(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 45 with following arguments:
# Arg1: Const@=8(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 46 with following arguments:
# Arg1: Stack@=8(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 47 with following arguments:
# Arg1: Stack@=3(double)
# Arg2: Stack@=8(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 48 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 49 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ILABEL at line: 61 with following arguments:
# Executing instruction: IPUSHS at line: 62 with following arguments:
# Arg1: LF@a=3(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 63 with following arguments:
# Arg1: Stack@=3(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 64 with following arguments:
# Arg1: Const@=3(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 65 with following arguments:
# Arg1: Stack@=3(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 66 with following arguments:
# Arg1: Stack@=3(double)
# Arg2: Stack@=3(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 67 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 68 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ILABEL at line: 80 with following arguments:
# Executing instruction: IPUSHS at line: 82 with following arguments:
# Arg1: Const@=11(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 83 with following arguments:
# Arg1: Stack@=11(int)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 84 with following arguments:
# Arg1: Stack@=11(double)
# Dest: Stack@()
# Executing instruction: ICREATEFRAME at line: 85 with following arguments:
# Executing instruction: IDEFVAR at line: 86 with following arguments:
# Dest: TF@write
# Executing instruction: IPOPS at line: 87 with following arguments:
# Arg1: Stack@=11(int)
# Dest: TF@write()
# Executing instruction: IWRITE at line: 88 with following arguments:
# Arg1: TF@write=11(int)
# Executing instruction: ILABEL at line: 90 with following arguments:
# Executing instruction: IPUSHS at line: 92 with following arguments:
# Arg1: LF@a=3(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 93 with following arguments:
# Arg1: Stack@=3(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 94 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 95 with following arguments:
# Arg1: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 96 with following arguments:
# Arg1: Stack@=3(double)
# Arg2: Stack@=1(double)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 97 with following arguments:
# Arg1: Stack@=2(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 98 with following arguments:
# Arg1: Stack@=2(int)
# Dest: LF@a=3(int)
# Executing instruction: IJUMP at line: 100 with following arguments:
# Executing instruction: ILABEL at line: 33 with following arguments:
# Executing instruction: IPUSHS at line: 34 with following arguments:
# Arg1: LF@a=2(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 35 with following arguments:
# Arg1: Stack@=2(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 36 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 37 with following arguments:
# Arg1: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: ILSS at line: 38 with following arguments:
# Arg1: Stack@=2(double)
# Arg2: Stack@=1(double)
# Dest: Stack@()
# Executing instruction: INOTS at line: 39 with following arguments:
# Arg1: Stack@=false(bool)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 40 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 41 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 43 with following arguments:
# Arg1: LF@a=2(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 44 with following arguments:
# Arg1: Stack@=2(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 45 with following arguments:
# Arg1: Const@=8(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 46 with following arguments:
# Arg1: Stack@=8(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 47 with following arguments:
# Arg1: Stack@=2(double)
# Arg2: Stack@=8(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 48 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 49 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ILABEL at line: 61 with following arguments:
# Executing instruction: IPUSHS at line: 62 with following arguments:
# Arg1: LF@a=2(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 63 with following arguments:
# Arg1: Stack@=2(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 64 with following arguments:
# Arg1: Const@=3(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 65 with following arguments:
# Arg1: Stack@=3(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 66 with following arguments:
# Arg1: Stack@=2(double)
# Arg2: Stack@=3(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 67 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 68 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ILABEL at line: 80 with following arguments:
# Executing instruction: IPUSHS at line: 82 with following arguments:
# Arg1: Const@=11(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 83 with following arguments:
# Arg1: Stack@=11(int)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 84 with following arguments:
# Arg1: Stack@=11(double)
# Dest: Stack@()
# Executing instruction: ICREATEFRAME at line: 85 with following arguments:
# Executing instruction: IDEFVAR at line: 86 with following arguments:
# Dest: TF@write
# Executing instruction: IPOPS at line: 87 with following arguments:
# Arg1: Stack@=11(int)
# Dest: TF@write()
# Executing instruction: IWRITE at line: 88 with following arguments:
# Arg1: TF@write=11(int)
# Executing instruction: ILABEL at line: 90 with following arguments:
# Executing instruction: IPUSHS at line: 92 with following arguments:
# Arg1: LF@a=2(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 93 with following arguments:
# Arg1: Stack@=2(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 94 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 95 with following arguments:
# Arg1: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 96 with following arguments:
# Arg1: Stack@=2(double)
# Arg2: Stack@=1(double)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 97 with following arguments:
# Arg1: Stack@=1(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 98 with following arguments:
# Arg1: Stack@=1(int)
# Dest: LF@a=2(int)
# Executing instruction: IJUMP at line: 100 with following arguments:
# Executing instruction: ILABEL at line: 33 with following arguments:
# Executing instruction: IPUSHS at line: 34 with following arguments:
# Arg1: LF@a=1(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 35 with following arguments:
# Arg1: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 36 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 37 with following arguments:
# Arg1: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: ILSS at line: 38 with following arguments:
# Arg1: Stack@=1(double)
# Arg2: Stack@=1(double)
# Dest: Stack@()
# Executing instruction: INOTS at line: 39 with following arguments:
# Arg1: Stack@=false(bool)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 40 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 41 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 43 with following arguments:
# Arg1: LF@a=1(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 44 with following arguments:
# Arg1: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 45 with following arguments:
# Arg1: Const@=8(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 46 with following arguments:
# Arg1: Stack@=8(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 47 with following arguments:
# Arg1: Stack@=1(double)
# Arg2: Stack@=8(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 48 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 49 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ILABEL at line: 61 with following arguments:
# Executing instruction: IPUSHS at line: 62 with following arguments:
# Arg1: LF@a=1(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 63 with following arguments:
# Arg1: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 64 with following arguments:
# Arg1: Const@=3(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 65 with following arguments:
# Arg1: Stack@=3(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 66 with following arguments:
# Arg1: Stack@=1(double)
# Arg2: Stack@=3(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 67 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 68 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ILABEL at line: 80 with following arguments:
# Executing instruction: IPUSHS at line: 82 with following arguments:
# Arg1: Const@=11(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 83 with following arguments:
# Arg1: Stack@=11(int)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 84 with following arguments:
# Arg1: Stack@=11(double)
# Dest: Stack@()
# Executing instruction: ICREATEFRAME at line: 85 with following arguments:
# Executing instruction: IDEFVAR at line: 86 with following arguments:
# Dest: TF@write
# Executing instruction: IPOPS at line: 87 with following arguments:
# Arg1: Stack@=11(int)
# Dest: TF@write()
# Executing instruction: IWRITE at line: 88 with following arguments:
# Arg1: TF@write=11(int)
# Executing instruction: ILABEL at line: 90 with following arguments:
# Executing instruction: IPUSHS at line: 92 with following arguments:
# Arg1: LF@a=1(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 93 with following arguments:
# Arg1: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 94 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 95 with following arguments:
# Arg1: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 96 with following arguments:
# Arg1: Stack@=1(double)
# Arg2: Stack@=1(double)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 97 with following arguments:
# Arg1: Stack@=0(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 98 with following arguments:
# Arg1: Stack@=0(int)
# Dest: LF@a=1(int)
# Executing instruction: IJUMP at line: 100 with following arguments:
# Executing instruction: ILABEL at line: 33 with following arguments:
# Executing instruction: IPUSHS at line: 34 with following arguments:
# Arg1: LF@a=0(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 35 with following arguments:
# Arg1: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 36 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 37 with following arguments:
# Arg1: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: ILSS at line: 38 with following arguments:
# Arg1: Stack@=0(double)
# Arg2: Stack@=1(double)
# Dest: Stack@()
# Executing instruction: INOTS at line: 39 with following arguments:
# Arg1: Stack@=true(bool)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 40 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 41 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ILABEL at line: 101 with following arguments:
# Executing instruction: IJUMP at line: 103 with following arguments:
# Executing instruction: ILABEL at line: 114 with following arguments:
# Executing instruction: IGROOT at line: 117 with following arguments:
# I am Groot at 117 (2472).
# 
# STDOUT DIFF:
# 

# INTERPRETER STDIN: 
# 
#
# EXPECTED COMPILER EXIT CODE: 0
# CURRENT COMPILER EXIT CODE: 0
# EXPECTED INTERPRETER EXIT CODE: 0
# CURRENT INTERPRETER EXIT CODE: 0
# PRICE: 2472 (649+1823)
# GROOT: 2472
# 
#   1: ' while with elseif in condition
#   2: scope
#   3:     dim a as integer
#   4: 	if 78 > 2 then
#   5: 	    a = 12
#   6: 		do while a >= 1
#   7: 			if a > 8 then
#   8: 				print 69;
#   9: 			elseif a > 3 then
#  10: 				print 74;
#  11: 			else
#  12: 				print 11;
#  13: 			end if
#  14: 			a = a - 1
#  15: 		loop
#  16: 	else
#  17: 		print 77;
#  18: 	end if
#  19: end scope

########################################

.IFJcode17                                                                      #     1/115
DEFVAR GF@$str1                                                                 #     2/115
DEFVAR GF@$str2                                                                 #     3/115
DEFVAR GF@$num1                                                                 #     4/115
DEFVAR GF@$num2                                                                 #     5/115
DEFVAR GF@$num3                                                                 #     6/115
DEFVAR GF@$bool1                                                                #     7/115
DEFVAR GF@$counter                                                              #     8/115
DEFVAR GF@$char                                                                 #     9/115
JUMP $$main                                                                     #    10/115
LABEL $$main                                                                    #    12/115
CREATEFRAME                                                                     #    13/115
PUSHFRAME                                                                       #    14/115
DEFVAR LF@a                                                                     #    16/115
MOVE LF@a int@0                                                                 #    17/115
PUSHS int@78                                                                    #    19/115
INT2FLOATS                                                                      #    20/115
PUSHS int@2                                                                     #    21/115
INT2FLOATS                                                                      #    22/115
GTS                                                                             #    23/115
PUSHS bool@true                                                                 #    24/115
JUMPIFNEQS &else4                                                               #    25/115
PUSHS int@12                                                                    #    28/115
INT2FLOATS                                                                      #    29/115
FLOAT2R2EINTS                                                                   #    30/115
POPS LF@a                                                                       #    31/115
LABEL &while6                                                                   #    33/115
PUSHS LF@a                                                                      #    34/115
INT2FLOATS                                                                      #    35/115
PUSHS int@1                                                                     #    36/115
INT2FLOATS                                                                      #    37/115
LTS                                                                             #    38/115
NOTS                                                                            #    39/115
PUSHS bool@true                                                                 #    40/115
JUMPIFNEQS &loop6                                                               #    41/115
PUSHS LF@a                                                                      #    43/115
INT2FLOATS                                                                      #    44/115
PUSHS int@8                                                                     #    45/115
INT2FLOATS                                                                      #    46/115
GTS                                                                             #    47/115
PUSHS bool@true                                                                 #    48/115
JUMPIFNEQS &else7                                                               #    49/115
PUSHS int@69                                                                    #    52/115
INT2FLOATS                                                                      #    53/115
FLOAT2R2EINTS                                                                   #    54/115
CREATEFRAME                                                                     #    55/115
DEFVAR TF@write                                                                 #    56/115
POPS TF@write                                                                   #    57/115
WRITE TF@write                                                                  #    58/115
JUMP &endif7                                                                    #    60/115
LABEL &else7                                                                    #    61/115
PUSHS LF@a                                                                      #    62/115
INT2FLOATS                                                                      #    63/115
PUSHS int@3                                                                     #    64/115
INT2FLOATS                                                                      #    65/115
GTS                                                                             #    66/115
PUSHS bool@true                                                                 #    67/115
JUMPIFNEQS &else9                                                               #    68/115
PUSHS int@74                                                                    #    71/115
INT2FLOATS                                                                      #    72/115
FLOAT2R2EINTS                                                                   #    73/115
CREATEFRAME                                                                     #    74/115
DEFVAR TF@write                                                                 #    75/115
POPS TF@write                                                                   #    76/115
WRITE TF@write                                                                  #    77/115
JUMP &endif7                                                                    #    79/115
LABEL &else9                                                                    #    80/115
PUSHS int@11                                                                    #    82/115
INT2FLOATS                                                                      #    83/115
FLOAT2R2EINTS                                                                   #    84/115
CREATEFRAME                                                                     #    85/115
DEFVAR TF@write                                                                 #    86/115
POPS TF@write                                                                   #    87/115
WRITE TF@write                                                                  #    88/115
LABEL &endif7                                                                   #    90/115
PUSHS LF@a                                                                      #    92/115
INT2FLOATS                                                                      #    93/115
PUSHS int@1                                                                     #    94/115
INT2FLOATS                                                                      #    95/115
SUBS                                                                            #    96/115
FLOAT2R2EINTS                                                                   #    97/115
POPS LF@a                                                                       #    98/115
JUMP &while6                                                                    #   100/115
LABEL &loop6                                                                    #   101/115
JUMP &endif4                                                                    #   103/115
LABEL &else4                                                                    #   104/115
PUSHS int@77                                                                    #   106/115
INT2FLOATS                                                                      #   107/115
FLOAT2R2EINTS                                                                   #   108/115
CREATEFRAME                                                                     #   109/115
DEFVAR TF@write                                                                 #   110/115
POPS TF@write                                                                   #   111/115
WRITE TF@write                                                                  #   112/115
LABEL &endif4                                                                   #   114/115

