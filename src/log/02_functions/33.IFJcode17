# 2017-12-04 23:21:43.982949
# SECTION: 02_functions
# TEST: 33
# INFO: Double constant into build-in function substr
# REQUIRED EXTENSIONS: 
# ACTIVATED EXTENSIONS: FUNEXP, BASE, IFTHEN
# STATE: SUCCESS
# 
# COMPILER STDERR:
# 
# INTERPRETER STDERR:
# Executing instruction: IDEFVAR at line: 2 with following arguments:
# Dest: GF@$str1
# Executing instruction: IDEFVAR at line: 3 with following arguments:
# Dest: GF@$str2
# Executing instruction: IDEFVAR at line: 4 with following arguments:
# Dest: GF@$num1
# Executing instruction: IDEFVAR at line: 5 with following arguments:
# Dest: GF@$num2
# Executing instruction: IDEFVAR at line: 6 with following arguments:
# Dest: GF@$num3
# Executing instruction: IDEFVAR at line: 7 with following arguments:
# Dest: GF@$bool1
# Executing instruction: IDEFVAR at line: 8 with following arguments:
# Dest: GF@$counter
# Executing instruction: IDEFVAR at line: 9 with following arguments:
# Dest: GF@$char
# Executing instruction: IJUMP at line: 10 with following arguments:
# Executing instruction: ILABEL at line: 12 with following arguments:
# Executing instruction: ICREATEFRAME at line: 13 with following arguments:
# Executing instruction: IPUSHFRAME at line: 14 with following arguments:
# Executing instruction: IDEFVAR at line: 16 with following arguments:
# Dest: LF@a
# Executing instruction: IPUSHS at line: 17 with following arguments:
# Arg1: Const@=3(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 18 with following arguments:
# Arg1: Stack@=3(double)
# Dest: LF@a()
# Executing instruction: IDEFVAR at line: 21 with following arguments:
# Dest: LF@b
# Executing instruction: IMOVE at line: 22 with following arguments:
# Arg1: Const@=(string)
# Dest: LF@b()
# Executing instruction: IPUSHS at line: 25 with following arguments:
# Arg1: Const@=GZGGZGGGZGZ(string)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 26 with following arguments:
# Arg1: LF@a=3(double)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 27 with following arguments:
# Arg1: Stack@=3(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 28 with following arguments:
# Arg1: Const@=6(double)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 29 with following arguments:
# Arg1: Stack@=6(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 30 with following arguments:
# Arg1: Stack@=6(int)
# Dest: GF@$num1()
# Executing instruction: IPOPS at line: 31 with following arguments:
# Arg1: Stack@=3(int)
# Dest: GF@$num2()
# Executing instruction: ISUB at line: 32 with following arguments:
# Arg1: GF@$num2=3(int)
# Arg2: Const@=1(int)
# Dest: GF@$num2=3(int)
# Executing instruction: IPOPS at line: 33 with following arguments:
# Arg1: Stack@=GZGGZGGGZGZ(string)
# Dest: GF@$str2()
# Executing instruction: IMOVE at line: 34 with following arguments:
# Arg1: Const@=0(int)
# Dest: GF@$counter()
# Executing instruction: IMOVE at line: 35 with following arguments:
# Arg1: Const@=(string)
# Dest: GF@$str1()
# Executing instruction: ISTRLEN at line: 36 with following arguments:
# Arg1: GF@$str2=GZGGZGGGZGZ(string)
# Dest: GF@$num3()
# Executing instruction: IJUMPIFEQ at line: 37 with following arguments:
# Arg1: GF@$num3=11(int)
# Arg2: Const@=0(int)
# Executing instruction: IGT at line: 38 with following arguments:
# Arg1: GF@$num2=2(int)
# Arg2: Const@=-1(int)
# Dest: GF@$bool1()
# Executing instruction: IJUMPIFNEQ at line: 39 with following arguments:
# Arg1: GF@$bool1=true(bool)
# Arg2: Const@=true(bool)
# Executing instruction: ILS at line: 40 with following arguments:
# Arg1: GF@$num1=6(int)
# Arg2: Const@=0(int)
# Dest: GF@$bool1=true(bool)
# Executing instruction: IJUMPIFEQ at line: 41 with following arguments:
# Arg1: GF@$bool1=false(bool)
# Arg2: Const@=true(bool)
# Executing instruction: ISUB at line: 42 with following arguments:
# Arg1: GF@$num3=11(int)
# Arg2: GF@$num2=2(int)
# Dest: GF@$num3=11(int)
# Executing instruction: IGT at line: 43 with following arguments:
# Arg1: GF@$num1=6(int)
# Arg2: GF@$num3=9(int)
# Dest: GF@$bool1=false(bool)
# Executing instruction: IJUMPIFEQ at line: 44 with following arguments:
# Arg1: GF@$bool1=false(bool)
# Arg2: Const@=true(bool)
# Executing instruction: ILABEL at line: 45 with following arguments:
# Executing instruction: IGETCHAR at line: 46 with following arguments:
# Arg1: GF@$str2=GZGGZGGGZGZ(string)
# Arg2: GF@$num2=2(int)
# Dest: GF@$char()
# Executing instruction: ICONCAT at line: 47 with following arguments:
# Arg1: GF@$str1=(string)
# Arg2: GF@$char=G(string)
# Dest: GF@$str1=(string)
# Executing instruction: IADD at line: 48 with following arguments:
# Arg1: GF@$counter=0(int)
# Arg2: Const@=1(int)
# Dest: GF@$counter=0(int)
# Executing instruction: IADD at line: 49 with following arguments:
# Arg1: GF@$num2=2(int)
# Arg2: Const@=1(int)
# Dest: GF@$num2=2(int)
# Executing instruction: IJUMPIFNEQ at line: 50 with following arguments:
# Arg1: GF@$counter=1(int)
# Arg2: GF@$num1=6(int)
# Executing instruction: ILABEL at line: 45 with following arguments:
# Executing instruction: IGETCHAR at line: 46 with following arguments:
# Arg1: GF@$str2=GZGGZGGGZGZ(string)
# Arg2: GF@$num2=3(int)
# Dest: GF@$char=G(string)
# Executing instruction: ICONCAT at line: 47 with following arguments:
# Arg1: GF@$str1=G(string)
# Arg2: GF@$char=G(string)
# Dest: GF@$str1=G(string)
# Executing instruction: IADD at line: 48 with following arguments:
# Arg1: GF@$counter=1(int)
# Arg2: Const@=1(int)
# Dest: GF@$counter=1(int)
# Executing instruction: IADD at line: 49 with following arguments:
# Arg1: GF@$num2=3(int)
# Arg2: Const@=1(int)
# Dest: GF@$num2=3(int)
# Executing instruction: IJUMPIFNEQ at line: 50 with following arguments:
# Arg1: GF@$counter=2(int)
# Arg2: GF@$num1=6(int)
# Executing instruction: ILABEL at line: 45 with following arguments:
# Executing instruction: IGETCHAR at line: 46 with following arguments:
# Arg1: GF@$str2=GZGGZGGGZGZ(string)
# Arg2: GF@$num2=4(int)
# Dest: GF@$char=G(string)
# Executing instruction: ICONCAT at line: 47 with following arguments:
# Arg1: GF@$str1=GG(string)
# Arg2: GF@$char=Z(string)
# Dest: GF@$str1=GG(string)
# Executing instruction: IADD at line: 48 with following arguments:
# Arg1: GF@$counter=2(int)
# Arg2: Const@=1(int)
# Dest: GF@$counter=2(int)
# Executing instruction: IADD at line: 49 with following arguments:
# Arg1: GF@$num2=4(int)
# Arg2: Const@=1(int)
# Dest: GF@$num2=4(int)
# Executing instruction: IJUMPIFNEQ at line: 50 with following arguments:
# Arg1: GF@$counter=3(int)
# Arg2: GF@$num1=6(int)
# Executing instruction: ILABEL at line: 45 with following arguments:
# Executing instruction: IGETCHAR at line: 46 with following arguments:
# Arg1: GF@$str2=GZGGZGGGZGZ(string)
# Arg2: GF@$num2=5(int)
# Dest: GF@$char=Z(string)
# Executing instruction: ICONCAT at line: 47 with following arguments:
# Arg1: GF@$str1=GGZ(string)
# Arg2: GF@$char=G(string)
# Dest: GF@$str1=GGZ(string)
# Executing instruction: IADD at line: 48 with following arguments:
# Arg1: GF@$counter=3(int)
# Arg2: Const@=1(int)
# Dest: GF@$counter=3(int)
# Executing instruction: IADD at line: 49 with following arguments:
# Arg1: GF@$num2=5(int)
# Arg2: Const@=1(int)
# Dest: GF@$num2=5(int)
# Executing instruction: IJUMPIFNEQ at line: 50 with following arguments:
# Arg1: GF@$counter=4(int)
# Arg2: GF@$num1=6(int)
# Executing instruction: ILABEL at line: 45 with following arguments:
# Executing instruction: IGETCHAR at line: 46 with following arguments:
# Arg1: GF@$str2=GZGGZGGGZGZ(string)
# Arg2: GF@$num2=6(int)
# Dest: GF@$char=G(string)
# Executing instruction: ICONCAT at line: 47 with following arguments:
# Arg1: GF@$str1=GGZG(string)
# Arg2: GF@$char=G(string)
# Dest: GF@$str1=GGZG(string)
# Executing instruction: IADD at line: 48 with following arguments:
# Arg1: GF@$counter=4(int)
# Arg2: Const@=1(int)
# Dest: GF@$counter=4(int)
# Executing instruction: IADD at line: 49 with following arguments:
# Arg1: GF@$num2=6(int)
# Arg2: Const@=1(int)
# Dest: GF@$num2=6(int)
# Executing instruction: IJUMPIFNEQ at line: 50 with following arguments:
# Arg1: GF@$counter=5(int)
# Arg2: GF@$num1=6(int)
# Executing instruction: ILABEL at line: 45 with following arguments:
# Executing instruction: IGETCHAR at line: 46 with following arguments:
# Arg1: GF@$str2=GZGGZGGGZGZ(string)
# Arg2: GF@$num2=7(int)
# Dest: GF@$char=G(string)
# Executing instruction: ICONCAT at line: 47 with following arguments:
# Arg1: GF@$str1=GGZGG(string)
# Arg2: GF@$char=G(string)
# Dest: GF@$str1=GGZGG(string)
# Executing instruction: IADD at line: 48 with following arguments:
# Arg1: GF@$counter=5(int)
# Arg2: Const@=1(int)
# Dest: GF@$counter=5(int)
# Executing instruction: IADD at line: 49 with following arguments:
# Arg1: GF@$num2=7(int)
# Arg2: Const@=1(int)
# Dest: GF@$num2=7(int)
# Executing instruction: IJUMPIFNEQ at line: 50 with following arguments:
# Arg1: GF@$counter=6(int)
# Arg2: GF@$num1=6(int)
# Executing instruction: IJUMP at line: 51 with following arguments:
# Executing instruction: ILABEL at line: 55 with following arguments:
# Executing instruction: IPUSHS at line: 56 with following arguments:
# Arg1: GF@$str1=GGZGGG(string)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 57 with following arguments:
# Arg1: Stack@=GGZGGG(string)
# Dest: LF@b=(string)
# Executing instruction: IPUSHS at line: 60 with following arguments:
# Arg1: LF@b=GGZGGG(string)
# Dest: Stack@()
# Executing instruction: ICREATEFRAME at line: 61 with following arguments:
# Executing instruction: IDEFVAR at line: 62 with following arguments:
# Dest: TF@write
# Executing instruction: IPOPS at line: 63 with following arguments:
# Arg1: Stack@=GGZGGG(string)
# Dest: TF@write()
# Executing instruction: IWRITE at line: 64 with following arguments:
# Arg1: TF@write=GGZGGG(string)
# Executing instruction: IGROOT at line: 68 with following arguments:
# I am Groot at 68 (695).
# 
# STDOUT DIFF:
# 

# INTERPRETER STDIN: 
# 
#
# EXPECTED COMPILER EXIT CODE: 0
# CURRENT COMPILER EXIT CODE: 0
# EXPECTED INTERPRETER EXIT CODE: 0
# CURRENT INTERPRETER EXIT CODE: 0
# PRICE: 695 (182+513)
# GROOT: 695
# 
#   1: ' Double constant into build-in function substr
#   2: 
#   3: scope
#   4:     dim a as double = 3.0
#   5:     
#   6:     dim b as string
#   7:     
#   8:     b = substr(!"GZGGZGGGZGZ", a, 6.0)
#   9:     
#  10:     print b;
#  11:     
#  12: end scope

########################################

.IFJcode17                                                                      #     1/66
DEFVAR GF@$str1                                                                 #     2/66
DEFVAR GF@$str2                                                                 #     3/66
DEFVAR GF@$num1                                                                 #     4/66
DEFVAR GF@$num2                                                                 #     5/66
DEFVAR GF@$num3                                                                 #     6/66
DEFVAR GF@$bool1                                                                #     7/66
DEFVAR GF@$counter                                                              #     8/66
DEFVAR GF@$char                                                                 #     9/66
JUMP $$main                                                                     #    10/66
LABEL $$main                                                                    #    12/66
CREATEFRAME                                                                     #    13/66
PUSHFRAME                                                                       #    14/66
DEFVAR LF@a                                                                     #    16/66
PUSHS float@3                                                                   #    17/66
POPS LF@a                                                                       #    18/66
DEFVAR LF@b                                                                     #    21/66
MOVE LF@b string@                                                               #    22/66
PUSHS string@GZGGZGGGZGZ                                                        #    25/66
PUSHS LF@a                                                                      #    26/66
FLOAT2R2EINTS                                                                   #    27/66
PUSHS float@6                                                                   #    28/66
FLOAT2R2EINTS                                                                   #    29/66
POPS GF@$num1                                                                   #    30/66
POPS GF@$num2                                                                   #    31/66
SUB GF@$num2 GF@$num2 int@1                                                     #    32/66
POPS GF@$str2                                                                   #    33/66
MOVE GF@$counter int@0                                                          #    34/66
MOVE GF@$str1 string@                                                           #    35/66
STRLEN GF@$num3 GF@$str2                                                        #    36/66
JUMPIFEQ &sub_end1 GF@$num3 int@0                                               #    37/66
GT GF@$bool1 GF@$num2 int@-1                                                    #    38/66
JUMPIFNEQ &sub_end1 GF@$bool1 bool@true                                         #    39/66
LT GF@$bool1 GF@$num1 int@0                                                     #    40/66
JUMPIFEQ &rest1 GF@$bool1 bool@true                                             #    41/66
SUB GF@$num3 GF@$num3 GF@$num2                                                  #    42/66
GT GF@$bool1 GF@$num1 GF@$num3                                                  #    43/66
JUMPIFEQ &rest1 GF@$bool1 bool@true                                             #    44/66
LABEL &cycle1                                                                   #    45/66
GETCHAR GF@$char GF@$str2 GF@$num2                                              #    46/66
CONCAT GF@$str1 GF@$str1 GF@$char                                               #    47/66
ADD GF@$counter GF@$counter int@1                                               #    48/66
ADD GF@$num2 GF@$num2 int@1                                                     #    49/66
JUMPIFNEQ &cycle1 GF@$counter GF@$num1                                          #    50/66
JUMP &sub_end1                                                                  #    51/66
LABEL &rest1                                                                    #    52/66
MOVE GF@$num1 GF@$num3                                                          #    53/66
JUMP &cycle1                                                                    #    54/66
LABEL &sub_end1                                                                 #    55/66
PUSHS GF@$str1                                                                  #    56/66
POPS LF@b                                                                       #    57/66
PUSHS LF@b                                                                      #    60/66
CREATEFRAME                                                                     #    61/66
DEFVAR TF@write                                                                 #    62/66
POPS TF@write                                                                   #    63/66
WRITE TF@write                                                                  #    64/66

