# 2017-12-04 23:21:45.824353
# SECTION: 11_base
# TEST: 06
# INFO: Function binary * hexa with function
# REQUIRED EXTENSIONS: FUNEXP, BASE
# ACTIVATED EXTENSIONS: FUNEXP, BASE, IFTHEN
# STATE: SUCCESS
# 
# COMPILER STDERR:
# 
# INTERPRETER STDERR:
# Executing instruction: IDEFVAR at line: 2 with following arguments:
# Dest: GF@$str1
# Executing instruction: IDEFVAR at line: 3 with following arguments:
# Dest: GF@$str2
# Executing instruction: IDEFVAR at line: 4 with following arguments:
# Dest: GF@$num1
# Executing instruction: IDEFVAR at line: 5 with following arguments:
# Dest: GF@$num2
# Executing instruction: IDEFVAR at line: 6 with following arguments:
# Dest: GF@$num3
# Executing instruction: IDEFVAR at line: 7 with following arguments:
# Dest: GF@$bool1
# Executing instruction: IDEFVAR at line: 8 with following arguments:
# Dest: GF@$counter
# Executing instruction: IDEFVAR at line: 9 with following arguments:
# Dest: GF@$char
# Executing instruction: IJUMP at line: 10 with following arguments:
# Executing instruction: ILABEL at line: 27 with following arguments:
# Executing instruction: ICREATEFRAME at line: 28 with following arguments:
# Executing instruction: IPUSHFRAME at line: 29 with following arguments:
# Executing instruction: IDEFVAR at line: 31 with following arguments:
# Dest: LF@a
# Executing instruction: IMOVE at line: 32 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@a()
# Executing instruction: IPUSHS at line: 34 with following arguments:
# Arg1: Const@=10(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 35 with following arguments:
# Arg1: Stack@=10(int)
# Dest: Stack@()
# Executing instruction: ICALL at line: 36 with following arguments:
# Executing instruction: ILABEL at line: 12 with following arguments:
# Executing instruction: ICREATEFRAME at line: 13 with following arguments:
# Executing instruction: IPUSHFRAME at line: 14 with following arguments:
# Executing instruction: IPUSHS at line: 17 with following arguments:
# Arg1: Const@=8097(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 18 with following arguments:
# Arg1: Stack@=8097(int)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 19 with following arguments:
# Arg1: Stack@=8097(double)
# Dest: Stack@()
# Executing instruction: IPOPFRAME at line: 20 with following arguments:
# Executing instruction: IRETURN at line: 21 with following arguments:
# Executing instruction: IINT2FLOATS at line: 37 with following arguments:
# Arg1: Stack@=8097(int)
# Dest: Stack@()
# Executing instruction: IMULTS at line: 38 with following arguments:
# Arg1: Stack@=10(double)
# Arg2: Stack@=8097(double)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 39 with following arguments:
# Arg1: Stack@=80970(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 40 with following arguments:
# Arg1: Stack@=80970(int)
# Dest: LF@a=0(int)
# Executing instruction: IPUSHS at line: 42 with following arguments:
# Arg1: LF@a=80970(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 43 with following arguments:
# Arg1: Stack@=80970(int)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 44 with following arguments:
# Arg1: Stack@=80970(double)
# Dest: Stack@()
# Executing instruction: ICREATEFRAME at line: 45 with following arguments:
# Executing instruction: IDEFVAR at line: 46 with following arguments:
# Dest: TF@write
# Executing instruction: IPOPS at line: 47 with following arguments:
# Arg1: Stack@=80970(int)
# Dest: TF@write()
# Executing instruction: IWRITE at line: 48 with following arguments:
# Arg1: TF@write=80970(int)
# Executing instruction: IGROOT at line: 51 with following arguments:
# I am Groot at 51 (161).
# 
# STDOUT DIFF:
# 

# INTERPRETER STDIN: 
# 
#
# EXPECTED COMPILER EXIT CODE: 0
# CURRENT COMPILER EXIT CODE: 0
# EXPECTED INTERPRETER EXIT CODE: 0
# CURRENT INTERPRETER EXIT CODE: 0
# PRICE: 161 (54+107)
# GROOT: 161
# 
#   1: 'Function binary * hexa with function
#   2: function foo() as integer
#   3: 	return &h1fa1
#   4: end function
#   5: 
#   6: scope
#   7: 	dim a as integer
#   8: 	a = &b1010 * foo()
#   9: 	print a;
#  10: end scope

########################################

.IFJcode17                                                                      #     1/49
DEFVAR GF@$str1                                                                 #     2/49
DEFVAR GF@$str2                                                                 #     3/49
DEFVAR GF@$num1                                                                 #     4/49
DEFVAR GF@$num2                                                                 #     5/49
DEFVAR GF@$num3                                                                 #     6/49
DEFVAR GF@$bool1                                                                #     7/49
DEFVAR GF@$counter                                                              #     8/49
DEFVAR GF@$char                                                                 #     9/49
JUMP $$main                                                                     #    10/49
LABEL $foo                                                                      #    12/49
CREATEFRAME                                                                     #    13/49
PUSHFRAME                                                                       #    14/49
PUSHS int@8097                                                                  #    17/49
INT2FLOATS                                                                      #    18/49
FLOAT2R2EINTS                                                                   #    19/49
POPFRAME                                                                        #    20/49
RETURN                                                                          #    21/49
PUSHS int@0                                                                     #    23/49
POPFRAME                                                                        #    24/49
RETURN                                                                          #    25/49
LABEL $$main                                                                    #    27/49
CREATEFRAME                                                                     #    28/49
PUSHFRAME                                                                       #    29/49
DEFVAR LF@a                                                                     #    31/49
MOVE LF@a int@0                                                                 #    32/49
PUSHS int@10                                                                    #    34/49
INT2FLOATS                                                                      #    35/49
CALL $foo                                                                       #    36/49
INT2FLOATS                                                                      #    37/49
MULS                                                                            #    38/49
FLOAT2R2EINTS                                                                   #    39/49
POPS LF@a                                                                       #    40/49
PUSHS LF@a                                                                      #    42/49
INT2FLOATS                                                                      #    43/49
FLOAT2R2EINTS                                                                   #    44/49
CREATEFRAME                                                                     #    45/49
DEFVAR TF@write                                                                 #    46/49
POPS TF@write                                                                   #    47/49
WRITE TF@write                                                                  #    48/49

