# 2017-12-04 23:21:44.702603
# SECTION: 05_conditions
# TEST: 02
# INFO: if recursion
# REQUIRED EXTENSIONS: 
# ACTIVATED EXTENSIONS: FUNEXP, BASE, IFTHEN
# STATE: SUCCESS
# 
# COMPILER STDERR:
# 
# INTERPRETER STDERR:
# Executing instruction: IDEFVAR at line: 2 with following arguments:
# Dest: GF@$str1
# Executing instruction: IDEFVAR at line: 3 with following arguments:
# Dest: GF@$str2
# Executing instruction: IDEFVAR at line: 4 with following arguments:
# Dest: GF@$num1
# Executing instruction: IDEFVAR at line: 5 with following arguments:
# Dest: GF@$num2
# Executing instruction: IDEFVAR at line: 6 with following arguments:
# Dest: GF@$num3
# Executing instruction: IDEFVAR at line: 7 with following arguments:
# Dest: GF@$bool1
# Executing instruction: IDEFVAR at line: 8 with following arguments:
# Dest: GF@$counter
# Executing instruction: IDEFVAR at line: 9 with following arguments:
# Dest: GF@$char
# Executing instruction: IJUMP at line: 10 with following arguments:
# Executing instruction: ILABEL at line: 12 with following arguments:
# Executing instruction: ICREATEFRAME at line: 13 with following arguments:
# Executing instruction: IPUSHFRAME at line: 14 with following arguments:
# Executing instruction: IPUSHS at line: 16 with following arguments:
# Arg1: Const@=8(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 17 with following arguments:
# Arg1: Stack@=8(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 18 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 19 with following arguments:
# Arg1: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 20 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 21 with following arguments:
# Arg1: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 22 with following arguments:
# Arg1: Stack@=0(double)
# Arg2: Stack@=1(double)
# Dest: Stack@()
# Executing instruction: ILSS at line: 23 with following arguments:
# Arg1: Stack@=8(double)
# Arg2: Stack@=-1(double)
# Dest: Stack@()
# Executing instruction: INOTS at line: 24 with following arguments:
# Arg1: Stack@=false(bool)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 25 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 26 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 29 with following arguments:
# Arg1: Const@=75(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 30 with following arguments:
# Arg1: Stack@=75(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 31 with following arguments:
# Arg1: Const@=8(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 32 with following arguments:
# Arg1: Stack@=8(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 33 with following arguments:
# Arg1: Stack@=75(double)
# Arg2: Stack@=8(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 34 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 35 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 38 with following arguments:
# Arg1: Const@=42(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 39 with following arguments:
# Arg1: Stack@=42(int)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 40 with following arguments:
# Arg1: Stack@=42(double)
# Dest: Stack@()
# Executing instruction: ICREATEFRAME at line: 41 with following arguments:
# Executing instruction: IDEFVAR at line: 42 with following arguments:
# Dest: TF@write
# Executing instruction: IPOPS at line: 43 with following arguments:
# Arg1: Stack@=42(int)
# Dest: TF@write()
# Executing instruction: IWRITE at line: 44 with following arguments:
# Arg1: TF@write=42(int)
# Executing instruction: IJUMP at line: 46 with following arguments:
# Executing instruction: ILABEL at line: 50 with following arguments:
# Executing instruction: IJUMP at line: 52 with following arguments:
# Executing instruction: ILABEL at line: 81 with following arguments:
# Executing instruction: IGROOT at line: 84 with following arguments:
# I am Groot at 84 (183).
# 
# STDOUT DIFF:
# 

# INTERPRETER STDIN: 
# 
#
# EXPECTED COMPILER EXIT CODE: 0
# CURRENT COMPILER EXIT CODE: 0
# EXPECTED INTERPRETER EXIT CODE: 0
# CURRENT INTERPRETER EXIT CODE: 0
# PRICE: 183 (55+128)
# GROOT: 183
# 
#   1: ' if recursion
#   2: scope
#   3: 	if 8 >= (0 - 1) then
#   4: 		if 75 > 8 then
#   5: 			print 42;
#   6: 		else
#   7: 
#   8: 		end if
#   9: 	else
#  10: 		if 8 > (5 - 12) then
#  11: 			print 58;
#  12: 		else
#  13: 
#  14: 		end if
#  15: 	end if
#  16: end scope

########################################

.IFJcode17                                                                      #     1/82
DEFVAR GF@$str1                                                                 #     2/82
DEFVAR GF@$str2                                                                 #     3/82
DEFVAR GF@$num1                                                                 #     4/82
DEFVAR GF@$num2                                                                 #     5/82
DEFVAR GF@$num3                                                                 #     6/82
DEFVAR GF@$bool1                                                                #     7/82
DEFVAR GF@$counter                                                              #     8/82
DEFVAR GF@$char                                                                 #     9/82
JUMP $$main                                                                     #    10/82
LABEL $$main                                                                    #    12/82
CREATEFRAME                                                                     #    13/82
PUSHFRAME                                                                       #    14/82
PUSHS int@8                                                                     #    16/82
INT2FLOATS                                                                      #    17/82
PUSHS int@0                                                                     #    18/82
INT2FLOATS                                                                      #    19/82
PUSHS int@1                                                                     #    20/82
INT2FLOATS                                                                      #    21/82
SUBS                                                                            #    22/82
LTS                                                                             #    23/82
NOTS                                                                            #    24/82
PUSHS bool@true                                                                 #    25/82
JUMPIFNEQS &else3                                                               #    26/82
PUSHS int@75                                                                    #    29/82
INT2FLOATS                                                                      #    30/82
PUSHS int@8                                                                     #    31/82
INT2FLOATS                                                                      #    32/82
GTS                                                                             #    33/82
PUSHS bool@true                                                                 #    34/82
JUMPIFNEQS &else4                                                               #    35/82
PUSHS int@42                                                                    #    38/82
INT2FLOATS                                                                      #    39/82
FLOAT2R2EINTS                                                                   #    40/82
CREATEFRAME                                                                     #    41/82
DEFVAR TF@write                                                                 #    42/82
POPS TF@write                                                                   #    43/82
WRITE TF@write                                                                  #    44/82
JUMP &endif4                                                                    #    46/82
LABEL &else4                                                                    #    47/82
LABEL &endif4                                                                   #    50/82
JUMP &endif3                                                                    #    52/82
LABEL &else3                                                                    #    53/82
PUSHS int@8                                                                     #    55/82
INT2FLOATS                                                                      #    56/82
PUSHS int@5                                                                     #    57/82
INT2FLOATS                                                                      #    58/82
PUSHS int@12                                                                    #    59/82
INT2FLOATS                                                                      #    60/82
SUBS                                                                            #    61/82
GTS                                                                             #    62/82
PUSHS bool@true                                                                 #    63/82
JUMPIFNEQS &else10                                                              #    64/82
PUSHS int@58                                                                    #    67/82
INT2FLOATS                                                                      #    68/82
FLOAT2R2EINTS                                                                   #    69/82
CREATEFRAME                                                                     #    70/82
DEFVAR TF@write                                                                 #    71/82
POPS TF@write                                                                   #    72/82
WRITE TF@write                                                                  #    73/82
JUMP &endif10                                                                   #    75/82
LABEL &else10                                                                   #    76/82
LABEL &endif10                                                                  #    79/82
LABEL &endif3                                                                   #    81/82

