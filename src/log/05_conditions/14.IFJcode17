# 2017-12-04 23:21:44.798384
# SECTION: 05_conditions
# TEST: 14
# INFO: Correct condition without spaces
# REQUIRED EXTENSIONS: IFTHEN
# ACTIVATED EXTENSIONS: FUNEXP, BASE, IFTHEN
# STATE: SUCCESS
# 
# COMPILER STDERR:
# 
# INTERPRETER STDERR:
# Executing instruction: IDEFVAR at line: 2 with following arguments:
# Dest: GF@$str1
# Executing instruction: IDEFVAR at line: 3 with following arguments:
# Dest: GF@$str2
# Executing instruction: IDEFVAR at line: 4 with following arguments:
# Dest: GF@$num1
# Executing instruction: IDEFVAR at line: 5 with following arguments:
# Dest: GF@$num2
# Executing instruction: IDEFVAR at line: 6 with following arguments:
# Dest: GF@$num3
# Executing instruction: IDEFVAR at line: 7 with following arguments:
# Dest: GF@$bool1
# Executing instruction: IDEFVAR at line: 8 with following arguments:
# Dest: GF@$counter
# Executing instruction: IDEFVAR at line: 9 with following arguments:
# Dest: GF@$char
# Executing instruction: IJUMP at line: 10 with following arguments:
# Executing instruction: ILABEL at line: 12 with following arguments:
# Executing instruction: ICREATEFRAME at line: 13 with following arguments:
# Executing instruction: IPUSHFRAME at line: 14 with following arguments:
# Executing instruction: IDEFVAR at line: 16 with following arguments:
# Dest: LF@a
# Executing instruction: IPUSHS at line: 17 with following arguments:
# Arg1: Const@=10(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 18 with following arguments:
# Arg1: Stack@=10(int)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 19 with following arguments:
# Arg1: Stack@=10(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 20 with following arguments:
# Arg1: Stack@=10(int)
# Dest: LF@a()
# Executing instruction: IPUSHS at line: 22 with following arguments:
# Arg1: LF@a=10(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 23 with following arguments:
# Arg1: Stack@=10(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 24 with following arguments:
# Arg1: Const@=100(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 25 with following arguments:
# Arg1: Stack@=100(int)
# Dest: Stack@()
# Executing instruction: ILSS at line: 26 with following arguments:
# Arg1: Stack@=10(double)
# Arg2: Stack@=100(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 27 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 28 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 31 with following arguments:
# Arg1: Const@=ok(string)
# Dest: Stack@()
# Executing instruction: ICREATEFRAME at line: 32 with following arguments:
# Executing instruction: IDEFVAR at line: 33 with following arguments:
# Dest: TF@write
# Executing instruction: IPOPS at line: 34 with following arguments:
# Arg1: Stack@=ok(string)
# Dest: TF@write()
# Executing instruction: IWRITE at line: 35 with following arguments:
# Arg1: TF@write=ok(string)
# Executing instruction: ILABEL at line: 37 with following arguments:
# Executing instruction: ILABEL at line: 38 with following arguments:
# Executing instruction: IGROOT at line: 42 with following arguments:
# I am Groot at 42 (137).
# 
# STDOUT DIFF:
# 

# INTERPRETER STDIN: 
# 
#
# EXPECTED COMPILER EXIT CODE: 0
# CURRENT COMPILER EXIT CODE: 0
# EXPECTED INTERPRETER EXIT CODE: 0
# CURRENT INTERPRETER EXIT CODE: 0
# PRICE: 137 (37+100)
# GROOT: 137
# 
#   1: ' Correct condition without spaces
#   2: scope
#   3: dim a as integer=10
#   4: if a<100then
#   5:     print!"ok";
#   6: end if
#   7: 
#   8: end scope

########################################

.IFJcode17                                                                      #     1/40
DEFVAR GF@$str1                                                                 #     2/40
DEFVAR GF@$str2                                                                 #     3/40
DEFVAR GF@$num1                                                                 #     4/40
DEFVAR GF@$num2                                                                 #     5/40
DEFVAR GF@$num3                                                                 #     6/40
DEFVAR GF@$bool1                                                                #     7/40
DEFVAR GF@$counter                                                              #     8/40
DEFVAR GF@$char                                                                 #     9/40
JUMP $$main                                                                     #    10/40
LABEL $$main                                                                    #    12/40
CREATEFRAME                                                                     #    13/40
PUSHFRAME                                                                       #    14/40
DEFVAR LF@a                                                                     #    16/40
PUSHS int@10                                                                    #    17/40
INT2FLOATS                                                                      #    18/40
FLOAT2R2EINTS                                                                   #    19/40
POPS LF@a                                                                       #    20/40
PUSHS LF@a                                                                      #    22/40
INT2FLOATS                                                                      #    23/40
PUSHS int@100                                                                   #    24/40
INT2FLOATS                                                                      #    25/40
LTS                                                                             #    26/40
PUSHS bool@true                                                                 #    27/40
JUMPIFNEQS &else4                                                               #    28/40
PUSHS string@ok                                                                 #    31/40
CREATEFRAME                                                                     #    32/40
DEFVAR TF@write                                                                 #    33/40
POPS TF@write                                                                   #    34/40
WRITE TF@write                                                                  #    35/40
LABEL &else4                                                                    #    37/40
LABEL &endif4                                                                   #    38/40

