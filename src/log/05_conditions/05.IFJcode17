# 2017-12-04 23:21:44.727849
# SECTION: 05_conditions
# TEST: 05
# INFO: if with else if
# REQUIRED EXTENSIONS: IFTHEN
# ACTIVATED EXTENSIONS: FUNEXP, BASE, IFTHEN
# STATE: SUCCESS
# 
# COMPILER STDERR:
# 
# INTERPRETER STDERR:
# Executing instruction: IDEFVAR at line: 2 with following arguments:
# Dest: GF@$str1
# Executing instruction: IDEFVAR at line: 3 with following arguments:
# Dest: GF@$str2
# Executing instruction: IDEFVAR at line: 4 with following arguments:
# Dest: GF@$num1
# Executing instruction: IDEFVAR at line: 5 with following arguments:
# Dest: GF@$num2
# Executing instruction: IDEFVAR at line: 6 with following arguments:
# Dest: GF@$num3
# Executing instruction: IDEFVAR at line: 7 with following arguments:
# Dest: GF@$bool1
# Executing instruction: IDEFVAR at line: 8 with following arguments:
# Dest: GF@$counter
# Executing instruction: IDEFVAR at line: 9 with following arguments:
# Dest: GF@$char
# Executing instruction: IJUMP at line: 10 with following arguments:
# Executing instruction: ILABEL at line: 12 with following arguments:
# Executing instruction: ICREATEFRAME at line: 13 with following arguments:
# Executing instruction: IPUSHFRAME at line: 14 with following arguments:
# Executing instruction: IPUSHS at line: 16 with following arguments:
# Arg1: Const@=8(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 17 with following arguments:
# Arg1: Stack@=8(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 18 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 19 with following arguments:
# Arg1: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IEQS at line: 20 with following arguments:
# Arg1: Stack@=8(double)
# Arg2: Stack@=0(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 21 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 22 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ILABEL at line: 34 with following arguments:
# Executing instruction: IPUSHS at line: 35 with following arguments:
# Arg1: Const@=45(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 36 with following arguments:
# Arg1: Stack@=45(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 37 with following arguments:
# Arg1: Const@=81(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 38 with following arguments:
# Arg1: Stack@=81(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 39 with following arguments:
# Arg1: Stack@=45(double)
# Arg2: Stack@=81(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 40 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 41 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ILABEL at line: 52 with following arguments:
# Executing instruction: ILABEL at line: 53 with following arguments:
# Executing instruction: IGROOT at line: 56 with following arguments:
# I am Groot at 56 (118).
# 
# EXPECTED INTERPRETER STDOUT:



# CURRENT INTERPRETER STDOUT:



# INTERPRETER STDIN: 
# 
#
# EXPECTED COMPILER EXIT CODE: 0
# CURRENT COMPILER EXIT CODE: 0
# EXPECTED INTERPRETER EXIT CODE: 0
# CURRENT INTERPRETER EXIT CODE: 0
# PRICE: 118 (32+86)
# GROOT: 118
# 
#   1: ' if with else if
#   2: scope
#   3: 	if 8 = 0 then
#   4: 		print 42;
#   5: 	elseif 45 > 81 then
#   6: 		print 74;
#   7: 	end if
#   8: end scope

########################################

.IFJcode17                                                                      #     1/54
DEFVAR GF@$str1                                                                 #     2/54
DEFVAR GF@$str2                                                                 #     3/54
DEFVAR GF@$num1                                                                 #     4/54
DEFVAR GF@$num2                                                                 #     5/54
DEFVAR GF@$num3                                                                 #     6/54
DEFVAR GF@$bool1                                                                #     7/54
DEFVAR GF@$counter                                                              #     8/54
DEFVAR GF@$char                                                                 #     9/54
JUMP $$main                                                                     #    10/54
LABEL $$main                                                                    #    12/54
CREATEFRAME                                                                     #    13/54
PUSHFRAME                                                                       #    14/54
PUSHS int@8                                                                     #    16/54
INT2FLOATS                                                                      #    17/54
PUSHS int@0                                                                     #    18/54
INT2FLOATS                                                                      #    19/54
EQS                                                                             #    20/54
PUSHS bool@true                                                                 #    21/54
JUMPIFNEQS &else3                                                               #    22/54
PUSHS int@42                                                                    #    25/54
INT2FLOATS                                                                      #    26/54
FLOAT2R2EINTS                                                                   #    27/54
CREATEFRAME                                                                     #    28/54
DEFVAR TF@write                                                                 #    29/54
POPS TF@write                                                                   #    30/54
WRITE TF@write                                                                  #    31/54
JUMP &endif3                                                                    #    33/54
LABEL &else3                                                                    #    34/54
PUSHS int@45                                                                    #    35/54
INT2FLOATS                                                                      #    36/54
PUSHS int@81                                                                    #    37/54
INT2FLOATS                                                                      #    38/54
GTS                                                                             #    39/54
PUSHS bool@true                                                                 #    40/54
JUMPIFNEQS &else5                                                               #    41/54
PUSHS int@74                                                                    #    44/54
INT2FLOATS                                                                      #    45/54
FLOAT2R2EINTS                                                                   #    46/54
CREATEFRAME                                                                     #    47/54
DEFVAR TF@write                                                                 #    48/54
POPS TF@write                                                                   #    49/54
WRITE TF@write                                                                  #    50/54
LABEL &else5                                                                    #    52/54
LABEL &endif3                                                                   #    53/54

