# 2017-12-04 23:21:44.719837
# SECTION: 05_conditions
# TEST: 04
# INFO: two ifs
# REQUIRED EXTENSIONS: IFTHEN
# ACTIVATED EXTENSIONS: FUNEXP, BASE, IFTHEN
# STATE: SUCCESS
# 
# COMPILER STDERR:
# 
# INTERPRETER STDERR:
# Executing instruction: IDEFVAR at line: 2 with following arguments:
# Dest: GF@$str1
# Executing instruction: IDEFVAR at line: 3 with following arguments:
# Dest: GF@$str2
# Executing instruction: IDEFVAR at line: 4 with following arguments:
# Dest: GF@$num1
# Executing instruction: IDEFVAR at line: 5 with following arguments:
# Dest: GF@$num2
# Executing instruction: IDEFVAR at line: 6 with following arguments:
# Dest: GF@$num3
# Executing instruction: IDEFVAR at line: 7 with following arguments:
# Dest: GF@$bool1
# Executing instruction: IDEFVAR at line: 8 with following arguments:
# Dest: GF@$counter
# Executing instruction: IDEFVAR at line: 9 with following arguments:
# Dest: GF@$char
# Executing instruction: IJUMP at line: 10 with following arguments:
# Executing instruction: ILABEL at line: 12 with following arguments:
# Executing instruction: ICREATEFRAME at line: 13 with following arguments:
# Executing instruction: IPUSHFRAME at line: 14 with following arguments:
# Executing instruction: IPUSHS at line: 16 with following arguments:
# Arg1: Const@=8(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 17 with following arguments:
# Arg1: Stack@=8(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 18 with following arguments:
# Arg1: Const@=8(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 19 with following arguments:
# Arg1: Stack@=8(int)
# Dest: Stack@()
# Executing instruction: IEQS at line: 20 with following arguments:
# Arg1: Stack@=8(double)
# Arg2: Stack@=8(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 21 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 22 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 25 with following arguments:
# Arg1: Const@=123(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 26 with following arguments:
# Arg1: Stack@=123(int)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 27 with following arguments:
# Arg1: Stack@=123(double)
# Dest: Stack@()
# Executing instruction: ICREATEFRAME at line: 28 with following arguments:
# Executing instruction: IDEFVAR at line: 29 with following arguments:
# Dest: TF@write
# Executing instruction: IPOPS at line: 30 with following arguments:
# Arg1: Stack@=123(int)
# Dest: TF@write()
# Executing instruction: IWRITE at line: 31 with following arguments:
# Arg1: TF@write=123(int)
# Executing instruction: ILABEL at line: 33 with following arguments:
# Executing instruction: ILABEL at line: 34 with following arguments:
# Executing instruction: IPUSHS at line: 36 with following arguments:
# Arg1: Const@=74(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 37 with following arguments:
# Arg1: Stack@=74(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 38 with following arguments:
# Arg1: Const@=6(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 39 with following arguments:
# Arg1: Stack@=6(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 40 with following arguments:
# Arg1: Const@=2(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 41 with following arguments:
# Arg1: Stack@=2(int)
# Dest: Stack@()
# Executing instruction: IADDS at line: 42 with following arguments:
# Arg1: Stack@=6(double)
# Arg2: Stack@=2(double)
# Dest: Stack@()
# Executing instruction: IGTS at line: 43 with following arguments:
# Arg1: Stack@=74(double)
# Arg2: Stack@=8(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 44 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 45 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 48 with following arguments:
# Arg1: Const@=74(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 49 with following arguments:
# Arg1: Stack@=74(int)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 50 with following arguments:
# Arg1: Stack@=74(double)
# Dest: Stack@()
# Executing instruction: ICREATEFRAME at line: 51 with following arguments:
# Executing instruction: IDEFVAR at line: 52 with following arguments:
# Dest: TF@write
# Executing instruction: IPOPS at line: 53 with following arguments:
# Arg1: Stack@=74(int)
# Dest: TF@write()
# Executing instruction: IWRITE at line: 54 with following arguments:
# Arg1: TF@write=74(int)
# Executing instruction: IJUMP at line: 56 with following arguments:
# Executing instruction: ILABEL at line: 60 with following arguments:
# Executing instruction: IGROOT at line: 63 with following arguments:
# I am Groot at 63 (210).
# 
# STDOUT DIFF:
# 

# INTERPRETER STDIN: 
# 
#
# EXPECTED COMPILER EXIT CODE: 0
# CURRENT COMPILER EXIT CODE: 0
# EXPECTED INTERPRETER EXIT CODE: 0
# CURRENT INTERPRETER EXIT CODE: 0
# PRICE: 210 (61+149)
# GROOT: 210
# 
#   1: ' two ifs
#   2: scope
#   3: 	if (8 = 8) then
#   4: 		print 123;
#   5: 	end if
#   6: 	if 74 > (6 + 2) then
#   7: 		print 74;
#   8: 	else
#   9: 
#  10: 	end if
#  11: end scope

########################################

.IFJcode17                                                                      #     1/61
DEFVAR GF@$str1                                                                 #     2/61
DEFVAR GF@$str2                                                                 #     3/61
DEFVAR GF@$num1                                                                 #     4/61
DEFVAR GF@$num2                                                                 #     5/61
DEFVAR GF@$num3                                                                 #     6/61
DEFVAR GF@$bool1                                                                #     7/61
DEFVAR GF@$counter                                                              #     8/61
DEFVAR GF@$char                                                                 #     9/61
JUMP $$main                                                                     #    10/61
LABEL $$main                                                                    #    12/61
CREATEFRAME                                                                     #    13/61
PUSHFRAME                                                                       #    14/61
PUSHS int@8                                                                     #    16/61
INT2FLOATS                                                                      #    17/61
PUSHS int@8                                                                     #    18/61
INT2FLOATS                                                                      #    19/61
EQS                                                                             #    20/61
PUSHS bool@true                                                                 #    21/61
JUMPIFNEQS &else3                                                               #    22/61
PUSHS int@123                                                                   #    25/61
INT2FLOATS                                                                      #    26/61
FLOAT2R2EINTS                                                                   #    27/61
CREATEFRAME                                                                     #    28/61
DEFVAR TF@write                                                                 #    29/61
POPS TF@write                                                                   #    30/61
WRITE TF@write                                                                  #    31/61
LABEL &else3                                                                    #    33/61
LABEL &endif3                                                                   #    34/61
PUSHS int@74                                                                    #    36/61
INT2FLOATS                                                                      #    37/61
PUSHS int@6                                                                     #    38/61
INT2FLOATS                                                                      #    39/61
PUSHS int@2                                                                     #    40/61
INT2FLOATS                                                                      #    41/61
ADDS                                                                            #    42/61
GTS                                                                             #    43/61
PUSHS bool@true                                                                 #    44/61
JUMPIFNEQS &else6                                                               #    45/61
PUSHS int@74                                                                    #    48/61
INT2FLOATS                                                                      #    49/61
FLOAT2R2EINTS                                                                   #    50/61
CREATEFRAME                                                                     #    51/61
DEFVAR TF@write                                                                 #    52/61
POPS TF@write                                                                   #    53/61
WRITE TF@write                                                                  #    54/61
JUMP &endif6                                                                    #    56/61
LABEL &else6                                                                    #    57/61
LABEL &endif6                                                                   #    60/61

