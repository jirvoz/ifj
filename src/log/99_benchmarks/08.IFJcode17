# 2017-12-04 23:21:47.446942
# SECTION: 99_benchmarks
# TEST: 08
# INFO: factorial by iteration method
# REQUIRED EXTENSIONS: 
# ACTIVATED EXTENSIONS: FUNEXP, BASE, IFTHEN
# STATE: SUCCESS
# 
# COMPILER STDERR:
# 
# INTERPRETER STDERR:
# Executing instruction: IDEFVAR at line: 2 with following arguments:
# Dest: GF@$str1
# Executing instruction: IDEFVAR at line: 3 with following arguments:
# Dest: GF@$str2
# Executing instruction: IDEFVAR at line: 4 with following arguments:
# Dest: GF@$num1
# Executing instruction: IDEFVAR at line: 5 with following arguments:
# Dest: GF@$num2
# Executing instruction: IDEFVAR at line: 6 with following arguments:
# Dest: GF@$num3
# Executing instruction: IDEFVAR at line: 7 with following arguments:
# Dest: GF@$bool1
# Executing instruction: IDEFVAR at line: 8 with following arguments:
# Dest: GF@$counter
# Executing instruction: IDEFVAR at line: 9 with following arguments:
# Dest: GF@$char
# Executing instruction: IJUMP at line: 10 with following arguments:
# Executing instruction: ILABEL at line: 12 with following arguments:
# Executing instruction: ICREATEFRAME at line: 13 with following arguments:
# Executing instruction: IPUSHFRAME at line: 14 with following arguments:
# Executing instruction: IDEFVAR at line: 16 with following arguments:
# Dest: LF@a
# Executing instruction: IMOVE at line: 17 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@a()
# Executing instruction: IDEFVAR at line: 19 with following arguments:
# Dest: LF@vysl
# Executing instruction: IMOVE at line: 20 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@vysl()
# Executing instruction: IPUSHS at line: 22 with following arguments:
# Arg1: Const@=Zadejte cislo pro vypocet faktorialu(string)
# Dest: Stack@()
# Executing instruction: ICREATEFRAME at line: 23 with following arguments:
# Executing instruction: IDEFVAR at line: 24 with following arguments:
# Dest: TF@write
# Executing instruction: IPOPS at line: 25 with following arguments:
# Arg1: Stack@=Zadejte cislo pro vypocet faktorialu(string)
# Dest: TF@write()
# Executing instruction: IWRITE at line: 26 with following arguments:
# Arg1: TF@write=Zadejte cislo pro vypocet faktorialu(string)
# Executing instruction: IWRITE at line: 28 with following arguments:
# Arg1: Const@=? (string)
# Executing instruction: IREAD at line: 29 with following arguments:
# Dest: LF@a=0(int)
# Executing instruction: IPUSHS at line: 31 with following arguments:
# Arg1: LF@a=10(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 32 with following arguments:
# Arg1: Stack@=10(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 33 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 34 with following arguments:
# Arg1: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: ILSS at line: 35 with following arguments:
# Arg1: Stack@=10(double)
# Arg2: Stack@=0(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 36 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 37 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ILABEL at line: 47 with following arguments:
# Executing instruction: IPUSHS at line: 49 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 50 with following arguments:
# Arg1: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 51 with following arguments:
# Arg1: Stack@=1(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 52 with following arguments:
# Arg1: Stack@=1(int)
# Dest: LF@vysl=0(int)
# Executing instruction: ILABEL at line: 54 with following arguments:
# Executing instruction: IPUSHS at line: 55 with following arguments:
# Arg1: LF@a=10(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 56 with following arguments:
# Arg1: Stack@=10(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 57 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 58 with following arguments:
# Arg1: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 59 with following arguments:
# Arg1: Stack@=10(double)
# Arg2: Stack@=0(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 60 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 61 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 63 with following arguments:
# Arg1: LF@vysl=1(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 64 with following arguments:
# Arg1: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 65 with following arguments:
# Arg1: LF@a=10(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 66 with following arguments:
# Arg1: Stack@=10(int)
# Dest: Stack@()
# Executing instruction: IMULTS at line: 67 with following arguments:
# Arg1: Stack@=1(double)
# Arg2: Stack@=10(double)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 68 with following arguments:
# Arg1: Stack@=10(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 69 with following arguments:
# Arg1: Stack@=10(int)
# Dest: LF@vysl=1(int)
# Executing instruction: IPUSHS at line: 71 with following arguments:
# Arg1: LF@a=10(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 72 with following arguments:
# Arg1: Stack@=10(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 73 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 74 with following arguments:
# Arg1: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 75 with following arguments:
# Arg1: Stack@=10(double)
# Arg2: Stack@=1(double)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 76 with following arguments:
# Arg1: Stack@=9(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 77 with following arguments:
# Arg1: Stack@=9(int)
# Dest: LF@a=10(int)
# Executing instruction: IJUMP at line: 79 with following arguments:
# Executing instruction: ILABEL at line: 54 with following arguments:
# Executing instruction: IPUSHS at line: 55 with following arguments:
# Arg1: LF@a=9(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 56 with following arguments:
# Arg1: Stack@=9(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 57 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 58 with following arguments:
# Arg1: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 59 with following arguments:
# Arg1: Stack@=9(double)
# Arg2: Stack@=0(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 60 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 61 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 63 with following arguments:
# Arg1: LF@vysl=10(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 64 with following arguments:
# Arg1: Stack@=10(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 65 with following arguments:
# Arg1: LF@a=9(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 66 with following arguments:
# Arg1: Stack@=9(int)
# Dest: Stack@()
# Executing instruction: IMULTS at line: 67 with following arguments:
# Arg1: Stack@=10(double)
# Arg2: Stack@=9(double)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 68 with following arguments:
# Arg1: Stack@=90(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 69 with following arguments:
# Arg1: Stack@=90(int)
# Dest: LF@vysl=10(int)
# Executing instruction: IPUSHS at line: 71 with following arguments:
# Arg1: LF@a=9(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 72 with following arguments:
# Arg1: Stack@=9(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 73 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 74 with following arguments:
# Arg1: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 75 with following arguments:
# Arg1: Stack@=9(double)
# Arg2: Stack@=1(double)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 76 with following arguments:
# Arg1: Stack@=8(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 77 with following arguments:
# Arg1: Stack@=8(int)
# Dest: LF@a=9(int)
# Executing instruction: IJUMP at line: 79 with following arguments:
# Executing instruction: ILABEL at line: 54 with following arguments:
# Executing instruction: IPUSHS at line: 55 with following arguments:
# Arg1: LF@a=8(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 56 with following arguments:
# Arg1: Stack@=8(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 57 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 58 with following arguments:
# Arg1: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 59 with following arguments:
# Arg1: Stack@=8(double)
# Arg2: Stack@=0(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 60 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 61 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 63 with following arguments:
# Arg1: LF@vysl=90(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 64 with following arguments:
# Arg1: Stack@=90(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 65 with following arguments:
# Arg1: LF@a=8(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 66 with following arguments:
# Arg1: Stack@=8(int)
# Dest: Stack@()
# Executing instruction: IMULTS at line: 67 with following arguments:
# Arg1: Stack@=90(double)
# Arg2: Stack@=8(double)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 68 with following arguments:
# Arg1: Stack@=720(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 69 with following arguments:
# Arg1: Stack@=720(int)
# Dest: LF@vysl=90(int)
# Executing instruction: IPUSHS at line: 71 with following arguments:
# Arg1: LF@a=8(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 72 with following arguments:
# Arg1: Stack@=8(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 73 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 74 with following arguments:
# Arg1: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 75 with following arguments:
# Arg1: Stack@=8(double)
# Arg2: Stack@=1(double)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 76 with following arguments:
# Arg1: Stack@=7(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 77 with following arguments:
# Arg1: Stack@=7(int)
# Dest: LF@a=8(int)
# Executing instruction: IJUMP at line: 79 with following arguments:
# Executing instruction: ILABEL at line: 54 with following arguments:
# Executing instruction: IPUSHS at line: 55 with following arguments:
# Arg1: LF@a=7(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 56 with following arguments:
# Arg1: Stack@=7(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 57 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 58 with following arguments:
# Arg1: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 59 with following arguments:
# Arg1: Stack@=7(double)
# Arg2: Stack@=0(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 60 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 61 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 63 with following arguments:
# Arg1: LF@vysl=720(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 64 with following arguments:
# Arg1: Stack@=720(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 65 with following arguments:
# Arg1: LF@a=7(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 66 with following arguments:
# Arg1: Stack@=7(int)
# Dest: Stack@()
# Executing instruction: IMULTS at line: 67 with following arguments:
# Arg1: Stack@=720(double)
# Arg2: Stack@=7(double)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 68 with following arguments:
# Arg1: Stack@=5040(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 69 with following arguments:
# Arg1: Stack@=5040(int)
# Dest: LF@vysl=720(int)
# Executing instruction: IPUSHS at line: 71 with following arguments:
# Arg1: LF@a=7(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 72 with following arguments:
# Arg1: Stack@=7(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 73 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 74 with following arguments:
# Arg1: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 75 with following arguments:
# Arg1: Stack@=7(double)
# Arg2: Stack@=1(double)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 76 with following arguments:
# Arg1: Stack@=6(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 77 with following arguments:
# Arg1: Stack@=6(int)
# Dest: LF@a=7(int)
# Executing instruction: IJUMP at line: 79 with following arguments:
# Executing instruction: ILABEL at line: 54 with following arguments:
# Executing instruction: IPUSHS at line: 55 with following arguments:
# Arg1: LF@a=6(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 56 with following arguments:
# Arg1: Stack@=6(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 57 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 58 with following arguments:
# Arg1: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 59 with following arguments:
# Arg1: Stack@=6(double)
# Arg2: Stack@=0(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 60 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 61 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 63 with following arguments:
# Arg1: LF@vysl=5040(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 64 with following arguments:
# Arg1: Stack@=5040(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 65 with following arguments:
# Arg1: LF@a=6(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 66 with following arguments:
# Arg1: Stack@=6(int)
# Dest: Stack@()
# Executing instruction: IMULTS at line: 67 with following arguments:
# Arg1: Stack@=5040(double)
# Arg2: Stack@=6(double)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 68 with following arguments:
# Arg1: Stack@=30240(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 69 with following arguments:
# Arg1: Stack@=30240(int)
# Dest: LF@vysl=5040(int)
# Executing instruction: IPUSHS at line: 71 with following arguments:
# Arg1: LF@a=6(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 72 with following arguments:
# Arg1: Stack@=6(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 73 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 74 with following arguments:
# Arg1: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 75 with following arguments:
# Arg1: Stack@=6(double)
# Arg2: Stack@=1(double)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 76 with following arguments:
# Arg1: Stack@=5(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 77 with following arguments:
# Arg1: Stack@=5(int)
# Dest: LF@a=6(int)
# Executing instruction: IJUMP at line: 79 with following arguments:
# Executing instruction: ILABEL at line: 54 with following arguments:
# Executing instruction: IPUSHS at line: 55 with following arguments:
# Arg1: LF@a=5(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 56 with following arguments:
# Arg1: Stack@=5(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 57 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 58 with following arguments:
# Arg1: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 59 with following arguments:
# Arg1: Stack@=5(double)
# Arg2: Stack@=0(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 60 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 61 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 63 with following arguments:
# Arg1: LF@vysl=30240(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 64 with following arguments:
# Arg1: Stack@=30240(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 65 with following arguments:
# Arg1: LF@a=5(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 66 with following arguments:
# Arg1: Stack@=5(int)
# Dest: Stack@()
# Executing instruction: IMULTS at line: 67 with following arguments:
# Arg1: Stack@=30240(double)
# Arg2: Stack@=5(double)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 68 with following arguments:
# Arg1: Stack@=151200(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 69 with following arguments:
# Arg1: Stack@=151200(int)
# Dest: LF@vysl=30240(int)
# Executing instruction: IPUSHS at line: 71 with following arguments:
# Arg1: LF@a=5(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 72 with following arguments:
# Arg1: Stack@=5(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 73 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 74 with following arguments:
# Arg1: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 75 with following arguments:
# Arg1: Stack@=5(double)
# Arg2: Stack@=1(double)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 76 with following arguments:
# Arg1: Stack@=4(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 77 with following arguments:
# Arg1: Stack@=4(int)
# Dest: LF@a=5(int)
# Executing instruction: IJUMP at line: 79 with following arguments:
# Executing instruction: ILABEL at line: 54 with following arguments:
# Executing instruction: IPUSHS at line: 55 with following arguments:
# Arg1: LF@a=4(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 56 with following arguments:
# Arg1: Stack@=4(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 57 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 58 with following arguments:
# Arg1: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 59 with following arguments:
# Arg1: Stack@=4(double)
# Arg2: Stack@=0(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 60 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 61 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 63 with following arguments:
# Arg1: LF@vysl=151200(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 64 with following arguments:
# Arg1: Stack@=151200(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 65 with following arguments:
# Arg1: LF@a=4(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 66 with following arguments:
# Arg1: Stack@=4(int)
# Dest: Stack@()
# Executing instruction: IMULTS at line: 67 with following arguments:
# Arg1: Stack@=151200(double)
# Arg2: Stack@=4(double)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 68 with following arguments:
# Arg1: Stack@=604800(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 69 with following arguments:
# Arg1: Stack@=604800(int)
# Dest: LF@vysl=151200(int)
# Executing instruction: IPUSHS at line: 71 with following arguments:
# Arg1: LF@a=4(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 72 with following arguments:
# Arg1: Stack@=4(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 73 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 74 with following arguments:
# Arg1: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 75 with following arguments:
# Arg1: Stack@=4(double)
# Arg2: Stack@=1(double)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 76 with following arguments:
# Arg1: Stack@=3(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 77 with following arguments:
# Arg1: Stack@=3(int)
# Dest: LF@a=4(int)
# Executing instruction: IJUMP at line: 79 with following arguments:
# Executing instruction: ILABEL at line: 54 with following arguments:
# Executing instruction: IPUSHS at line: 55 with following arguments:
# Arg1: LF@a=3(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 56 with following arguments:
# Arg1: Stack@=3(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 57 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 58 with following arguments:
# Arg1: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 59 with following arguments:
# Arg1: Stack@=3(double)
# Arg2: Stack@=0(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 60 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 61 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 63 with following arguments:
# Arg1: LF@vysl=604800(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 64 with following arguments:
# Arg1: Stack@=604800(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 65 with following arguments:
# Arg1: LF@a=3(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 66 with following arguments:
# Arg1: Stack@=3(int)
# Dest: Stack@()
# Executing instruction: IMULTS at line: 67 with following arguments:
# Arg1: Stack@=604800(double)
# Arg2: Stack@=3(double)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 68 with following arguments:
# Arg1: Stack@=1814400(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 69 with following arguments:
# Arg1: Stack@=1814400(int)
# Dest: LF@vysl=604800(int)
# Executing instruction: IPUSHS at line: 71 with following arguments:
# Arg1: LF@a=3(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 72 with following arguments:
# Arg1: Stack@=3(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 73 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 74 with following arguments:
# Arg1: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 75 with following arguments:
# Arg1: Stack@=3(double)
# Arg2: Stack@=1(double)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 76 with following arguments:
# Arg1: Stack@=2(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 77 with following arguments:
# Arg1: Stack@=2(int)
# Dest: LF@a=3(int)
# Executing instruction: IJUMP at line: 79 with following arguments:
# Executing instruction: ILABEL at line: 54 with following arguments:
# Executing instruction: IPUSHS at line: 55 with following arguments:
# Arg1: LF@a=2(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 56 with following arguments:
# Arg1: Stack@=2(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 57 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 58 with following arguments:
# Arg1: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 59 with following arguments:
# Arg1: Stack@=2(double)
# Arg2: Stack@=0(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 60 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 61 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 63 with following arguments:
# Arg1: LF@vysl=1814400(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 64 with following arguments:
# Arg1: Stack@=1814400(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 65 with following arguments:
# Arg1: LF@a=2(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 66 with following arguments:
# Arg1: Stack@=2(int)
# Dest: Stack@()
# Executing instruction: IMULTS at line: 67 with following arguments:
# Arg1: Stack@=1814400(double)
# Arg2: Stack@=2(double)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 68 with following arguments:
# Arg1: Stack@=3628800(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 69 with following arguments:
# Arg1: Stack@=3628800(int)
# Dest: LF@vysl=1814400(int)
# Executing instruction: IPUSHS at line: 71 with following arguments:
# Arg1: LF@a=2(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 72 with following arguments:
# Arg1: Stack@=2(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 73 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 74 with following arguments:
# Arg1: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 75 with following arguments:
# Arg1: Stack@=2(double)
# Arg2: Stack@=1(double)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 76 with following arguments:
# Arg1: Stack@=1(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 77 with following arguments:
# Arg1: Stack@=1(int)
# Dest: LF@a=2(int)
# Executing instruction: IJUMP at line: 79 with following arguments:
# Executing instruction: ILABEL at line: 54 with following arguments:
# Executing instruction: IPUSHS at line: 55 with following arguments:
# Arg1: LF@a=1(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 56 with following arguments:
# Arg1: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 57 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 58 with following arguments:
# Arg1: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 59 with following arguments:
# Arg1: Stack@=1(double)
# Arg2: Stack@=0(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 60 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 61 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 63 with following arguments:
# Arg1: LF@vysl=3628800(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 64 with following arguments:
# Arg1: Stack@=3628800(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 65 with following arguments:
# Arg1: LF@a=1(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 66 with following arguments:
# Arg1: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IMULTS at line: 67 with following arguments:
# Arg1: Stack@=3628800(double)
# Arg2: Stack@=1(double)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 68 with following arguments:
# Arg1: Stack@=3628800(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 69 with following arguments:
# Arg1: Stack@=3628800(int)
# Dest: LF@vysl=3628800(int)
# Executing instruction: IPUSHS at line: 71 with following arguments:
# Arg1: LF@a=1(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 72 with following arguments:
# Arg1: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 73 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 74 with following arguments:
# Arg1: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 75 with following arguments:
# Arg1: Stack@=1(double)
# Arg2: Stack@=1(double)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 76 with following arguments:
# Arg1: Stack@=0(double)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 77 with following arguments:
# Arg1: Stack@=0(int)
# Dest: LF@a=1(int)
# Executing instruction: IJUMP at line: 79 with following arguments:
# Executing instruction: ILABEL at line: 54 with following arguments:
# Executing instruction: IPUSHS at line: 55 with following arguments:
# Arg1: LF@a=0(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 56 with following arguments:
# Arg1: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 57 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 58 with following arguments:
# Arg1: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 59 with following arguments:
# Arg1: Stack@=0(double)
# Arg2: Stack@=0(double)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 60 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 61 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: ILABEL at line: 80 with following arguments:
# Executing instruction: IPUSHS at line: 82 with following arguments:
# Arg1: LF@vysl=3628800(int)
# Dest: Stack@()
# Executing instruction: IINT2FLOATS at line: 83 with following arguments:
# Arg1: Stack@=3628800(int)
# Dest: Stack@()
# Executing instruction: IFLOAT2R2EINTS at line: 84 with following arguments:
# Arg1: Stack@=3628800(double)
# Dest: Stack@()
# Executing instruction: ICREATEFRAME at line: 85 with following arguments:
# Executing instruction: IDEFVAR at line: 86 with following arguments:
# Dest: TF@write
# Executing instruction: IPOPS at line: 87 with following arguments:
# Arg1: Stack@=3628800(int)
# Dest: TF@write()
# Executing instruction: IWRITE at line: 88 with following arguments:
# Arg1: TF@write=3628800(int)
# Executing instruction: ILABEL at line: 90 with following arguments:
# Executing instruction: IGROOT at line: 93 with following arguments:
# I am Groot at 93 (1525).
# 
# STDOUT DIFF:
# 

# INTERPRETER STDIN: 
# 10
#
# EXPECTED COMPILER EXIT CODE: 0
# CURRENT COMPILER EXIT CODE: 0
# EXPECTED INTERPRETER EXIT CODE: 0
# CURRENT INTERPRETER EXIT CODE: 0
# PRICE: 1525 (358+1167)
# GROOT: 1525
# 
#   1: ' factorial by iteration method
#   2: 
#   3: scope 'Hlavni telo programu
#   4: Dim a As Integer
#   5: DIM vysl AS INTEGER
#   6: PrinT !"Zadejte cislo pro vypocet faktorialu";
#   7: InpuT A
#   8: If a < 0 THEN
#   9: print !"\nFaktorial nelze spocitat\n";
#  10: ELSE
#  11: Vysl = 1
#  12: Do WHile A > 0
#  13: VYSL = vysl * a
#  14: a = A - 1
#  15: LooP
#  16: Print vYsl;
#  17: end IF
#  18: END SCOPE

########################################

.IFJcode17                                                                      #     1/91
DEFVAR GF@$str1                                                                 #     2/91
DEFVAR GF@$str2                                                                 #     3/91
DEFVAR GF@$num1                                                                 #     4/91
DEFVAR GF@$num2                                                                 #     5/91
DEFVAR GF@$num3                                                                 #     6/91
DEFVAR GF@$bool1                                                                #     7/91
DEFVAR GF@$counter                                                              #     8/91
DEFVAR GF@$char                                                                 #     9/91
JUMP $$main                                                                     #    10/91
LABEL $$main                                                                    #    12/91
CREATEFRAME                                                                     #    13/91
PUSHFRAME                                                                       #    14/91
DEFVAR LF@a                                                                     #    16/91
MOVE LF@a int@0                                                                 #    17/91
DEFVAR LF@vysl                                                                  #    19/91
MOVE LF@vysl int@0                                                              #    20/91
PUSHS string@Zadejte\032cislo\032pro\032vypocet\032faktorialu                   #    22/91
CREATEFRAME                                                                     #    23/91
DEFVAR TF@write                                                                 #    24/91
POPS TF@write                                                                   #    25/91
WRITE TF@write                                                                  #    26/91
WRITE string@?\032                                                              #    28/91
READ LF@a int                                                                   #    29/91
PUSHS LF@a                                                                      #    31/91
INT2FLOATS                                                                      #    32/91
PUSHS int@0                                                                     #    33/91
INT2FLOATS                                                                      #    34/91
LTS                                                                             #    35/91
PUSHS bool@true                                                                 #    36/91
JUMPIFNEQS &else8                                                               #    37/91
PUSHS string@\010Faktorial\032nelze\032spocitat\010                             #    40/91
CREATEFRAME                                                                     #    41/91
DEFVAR TF@write                                                                 #    42/91
POPS TF@write                                                                   #    43/91
WRITE TF@write                                                                  #    44/91
JUMP &endif8                                                                    #    46/91
LABEL &else8                                                                    #    47/91
PUSHS int@1                                                                     #    49/91
INT2FLOATS                                                                      #    50/91
FLOAT2R2EINTS                                                                   #    51/91
POPS LF@vysl                                                                    #    52/91
LABEL &while12                                                                  #    54/91
PUSHS LF@a                                                                      #    55/91
INT2FLOATS                                                                      #    56/91
PUSHS int@0                                                                     #    57/91
INT2FLOATS                                                                      #    58/91
GTS                                                                             #    59/91
PUSHS bool@true                                                                 #    60/91
JUMPIFNEQS &loop12                                                              #    61/91
PUSHS LF@vysl                                                                   #    63/91
INT2FLOATS                                                                      #    64/91
PUSHS LF@a                                                                      #    65/91
INT2FLOATS                                                                      #    66/91
MULS                                                                            #    67/91
FLOAT2R2EINTS                                                                   #    68/91
POPS LF@vysl                                                                    #    69/91
PUSHS LF@a                                                                      #    71/91
INT2FLOATS                                                                      #    72/91
PUSHS int@1                                                                     #    73/91
INT2FLOATS                                                                      #    74/91
SUBS                                                                            #    75/91
FLOAT2R2EINTS                                                                   #    76/91
POPS LF@a                                                                       #    77/91
JUMP &while12                                                                   #    79/91
LABEL &loop12                                                                   #    80/91
PUSHS LF@vysl                                                                   #    82/91
INT2FLOATS                                                                      #    83/91
FLOAT2R2EINTS                                                                   #    84/91
CREATEFRAME                                                                     #    85/91
DEFVAR TF@write                                                                 #    86/91
POPS TF@write                                                                   #    87/91
WRITE TF@write                                                                  #    88/91
LABEL &endif8                                                                   #    90/91

